<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HELLO TRAVELER</title>
  
  <subtitle>Whr Blog</subtitle>
  <link href="https://whrblog.online/atom.xml" rel="self"/>
  
  <link href="https://whrblog.online/"/>
  <updated>2021-08-21T02:42:53.945Z</updated>
  <id>https://whrblog.online/</id>
  
  <author>
    <name>Whr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解读MTF曲线</title>
    <link href="https://whrblog.online/2021/07/01/%E8%A7%A3%E8%AF%BBmtf%E6%9B%B2%E7%BA%BF/"/>
    <id>https://whrblog.online/2021/07/01/%E8%A7%A3%E8%AF%BBmtf%E6%9B%B2%E7%BA%BF/</id>
    <published>2021-07-01T00:41:15.000Z</published>
    <updated>2021-08-21T02:42:53.945Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Modulation Transfer Function（调制传递函数）是分析镜头的解像比较科学的方法，这种测定光学频率的方式是以一个mm的范围内能呈现出多少条线来度量，其单位以line/mm来表示。所以当一支镜头能做到所入即所出的程度那就表示这支镜头是所谓的完美镜头，但是因为镜片镜头的设计往往还有很多因素影响所以不可能有这种理想化的镜头。</p></blockquote><span id="more"></span><hr><p>1.横坐标轴代表与画面中心的距离，从左到右代表从中心到边缘的成像 （全画幅镜头的横轴约22mm，残幅镜头的横轴约13mm） 2.纵坐标轴代表MTF值 3.黑色线条表示最大光圈，蓝色线条表示f/8光圈 4.粗线表示10线/mm，细线表示30线/mm 5.实线表示拍摄从中心呈放射状纹样的成像性能，用字母“S”表示 6.虚线表示拍摄线条呈同心圆向外扩展状纹样的成像性能，用字母“M”表示 &nbsp; [caption id=”” align=”aligncenter” width=”670”]<a href="https://z3.ax1x.com/2021/07/01/RD2Yo4.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://z3.ax1x.com/2021/07/01/RD2Yo4.png">      </a> <span class="exturl"><a class="exturl__link" href="https://www.canon.com.cn/product/ef/index/lensmtf.html/[/caption/]">https://www.canon.com.cn/product/ef/index/lensmtf.html\[/caption\]</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><hr><p>1. MTF值越接近1越好，即MTF线越高越好 2.粗线约高，说明镜头的反差表现越好 3.细线越高，说明镜头的分辨率越好 4. MTF曲线越平坦，说明边缘和中心的成像差距越小 5.实线和虚线越接近，说明镜头的焦外成像越好 6.蓝线说明镜头f/8时的成像水平，近似于镜头的最佳成像水平 7.黑线说明镜头最大光圈时的成像水平，大光圈的价值所在</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Modulation Transfer Function（调制传递函数）是分析镜头的解像比较科学的方法，这种测定光学频率的方式是以一个mm的范围内能呈现出多少条线来度量，其单位以line/mm来表示。所以当一支镜头能做到所入即所出的程度那就表示这支镜头是所谓的完美镜头，但是因为镜片镜头的设计往往还有很多因素影响所以不可能有这种理想化的镜头。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Digispark模拟HID键盘控制BIOS</title>
    <link href="https://whrblog.online/2021/04/05/%E9%80%9A%E8%BF%87digispark%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6bios/"/>
    <id>https://whrblog.online/2021/04/05/%E9%80%9A%E8%BF%87digispark%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6bios/</id>
    <published>2021-04-05T13:50:08.000Z</published>
    <updated>2021-08-21T02:42:53.937Z</updated>
    
    <content type="html"><![CDATA[<p>[collapse title=”故事背景”]有一个穷鬼，十分喜欢折腾电脑硬件，可他的父母并不支持他的兴趣爱好，他们认为生为学生就应该心无杂念的一心想着读书。几年过去了，穷鬼的电脑开始渐渐的赶不上时代了，他看了看他的CPU，不由自主地叹了口气：“Pentium E5300…</p><span id="more"></span><p>…“ 在他的不懈努力之下，从PY那里嫖来了一块Q6600和一块9600GT 又过了几年，穷鬼从一个不知名的仓库里拆出了一块Q9300。 没过多久，他收到一个快递，拆开一看竟然是印着自己名字的GT1030，那天，是他的生日。 一年后，穷鬼上了高中，发现处理器还是差那么亿点点，他看了看自己空空荡荡的钱包，一咬牙，买了一块X5450，装CPU的那天，他心里想着，装上了这块CPU你就无敌了…… 欧耶，点亮了！ 关机。 来BIOS里超个外频。欸，🌿🌿🌿，怎么点不亮了，#￥%……他发现了一个问题，每次开机前要断电， BIOS恢复后才能开机。 🌿那岂不是保存不了超频。 在默频用了一段时间后，他突发奇想，是否可以用arduino做badusb，在开机时模拟键盘，自动设置BIOS呢？他翻出来尘封已久的arduino……</p><p>_最后选择了digispark作为badusb_[/collapse]</p>        <h1 id="Digispark？">          <a href="#Digispark？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Digispark？" class="headerlink" title="Digispark？"></a>Digispark？</h1>      <p>Digispark是一款类似于Arduino Uno基于Attiny85的微控制器开发板。可用于制作Badusb设备，&nbsp;BadUSB是一种通过重写U盘固件伪装成USB输入设备(键盘,网卡)用于恶意用途的usb设备。杀毒软件由于无法接触到usb固件，所以对它也无可奈何 &nbsp;</p>        <h1 id="点个灯">          <a href="#点个灯" class="heading-link"><i class="fas fa-link"></i></a><a href="#点个灯" class="headerlink" title="点个灯"></a>点个灯</h1>      <p>尝试烧写一个示例程序。</p><p>//<em>因为此开发板有两种类型，并且这两种的LED接的引脚不一样，所以下面的代码中，同时在操作两个引脚。</em><br>void setup() {<br>  pinMode(0, OUTPUT); //LED on Model B<br>  pinMode(1, OUTPUT); //LED on Model A<br>}<br>void loop() {<br>  digitalWrite(0, HIGH); // turn the LED on (HIGH is the voltage level)<br>  digitalWrite(1, HIGH); delay(300); // wait for a second<br>  digitalWrite(0, LOW); // turn the LED off by making the voltage LOW<br>  digitalWrite(1, LOW); delay(300); // wait for a second<br>}</p><p>这款开发板比较特殊，先点击下载按钮，当出现如下提示时再插入开发板（而不是插好等下载）</p><p>项目使用了 718 字节，占用了 (11%) 程序存储空间。最大为 6012 字节。<br>全局变量使用了9字节的动态内存。<br>Running Digispark Uploader…<br>Plug in device now… (will timeout in 60 seconds)</p><p>这段时间是用来烧写程序的，因为烧写时引导程序需要通过USB接口与计算机沟通，所以这时候计算机才能识别到开发板。5秒后，内部的boot loader会退出烧写模式，并加载用户程序，所以计算机就识别不到它了，并且此时led才能正常闪烁。 [collapse title=”烧完它会谢谢你呐”]</p><p>Running Digispark Uploader…<br>Plug in device now… (will timeout in 60 seconds)</p><blockquote><p>Please plug in the device …<br>Press CTRL+C to terminate the program.<br>Device is found!<br>connecting: 16% complete<br>connecting: 22% complete<br>connecting: 28% complete<br>connecting: 33% complete<br>Device has firmware version 2.2<br>Device signature: 0x1e930b<br>Available space for user applications: 6522 bytes<br>Suggested sleep time between sending pages: 7ms<br>Whole page count: 102  page size: 64<br>Erase function sleep duration: 714ms<br>parsing: 50% complete<br>Erasing the memory …<br>erasing: 55% complete<br>erasing: 60% complete<br>erasing: 65% complete</p><blockquote><p>Eep! Connection to device lost during erase! Not to worry<br>This happens on some computers - reconnecting…<br>Reconnected! Continuing upload sequence…<br>Starting to upload …<br>writing: 70% complete<br>writing: 75% complete<br>writing: 80% complete<br>Starting the user app …<br>running: 100% complete<br>Micronucleus done. Thank you!</p></blockquote></blockquote><p>[/collapse] [dogevideo]af937f3787ae1eb1[/dogevideo]</p><hr>        <h1 id="撸代码">          <a href="#撸代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h1>      <p>在GitHub上有一个为digispark一键生成代码的project &gt; <span class="exturl"><a class="exturl__link" href="https://github.com/Catboy96/Automator">AutoMator</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> [collapse title=”长这样”]<a href="https://i.loli.net/2021/03/22/7cPFRJKUSrx5kIs.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://i.loli.net/2021/03/22/7cPFRJKUSrx5kIs.png" alt="长这样">      </a>[/collapse] &nbsp; &nbsp;</p><p>#include </p><p>void loop() {}</p><p>void setup() {<br>DigiKeyboard.sendKeyStroke(0);<br>DigiKeyboard.delay(1000);<br>//START<br>DigiKeyboard.delay(15000);<br>//ENTER BIOS<br>DigiKeyboard.sendKeyStroke(KEY_F1);<br>DigiKeyboard.delay(1000);<br>//TO ADVANCED<br>DigiKeyboard.sendKeyStroke(KEY_RIGHT_ARROW);<br>DigiKeyboard.delay(600);<br>//ENTER JUMPERFREE CONFIGURATION<br>DigiKeyboard.sendKeyStroke(KEY_ENTER);<br>DigiKeyboard.delay(600);<br>//SET OVERCLOCKING MODE<br>DigiKeyboard.sendKeyStroke(KEY_ENTER);<br>DigiKeyboard.delay(600);<br>//MANUAL<br>DigiKeyboard.sendKeyStroke(KEY_UP_ARROW);<br>DigiKeyboard.delay(600);<br>DigiKeyboard.sendKeyStroke(KEY_ENTER);<br>DigiKeyboard.delay(600);<br>//TO CPU FREQUENCY<br>DigiKeyboard.sendKeyStroke(KEY_DOWN_ARROW);<br>DigiKeyboard.delay(600);<br>//ENTER CPU FREQUENCY<br>DigiKeyboard.print(“380”);<br>DigiKeyboard.delay(600);<br>DigiKeyboard.sendKeyStroke(KEY_ENTER);<br>DigiKeyboard.delay(600);<br>//BACK TO ADVANCED<br>DigiKeyboard.sendKeyStroke(KEY_ESC);<br>DigiKeyboard.delay(600);<br>//TO CPU CONFIGURATION<br>DigiKeyboard.sendKeyStroke(KEY_DOWN_ARROW);<br>DigiKeyboard.delay(600);<br>//ENTER CPU CONFIGURATION<br>DigiKeyboard.sendKeyStroke(KEY_ENTER);<br>DigiKeyboard.delay(600);<br>//TO C1E SUPPORT<br>DigiKeyboard.sendKeyStroke(KEY_DOWN_ARROW);<br>DigiKeyboard.delay(600);<br>//SET C1E SUPPORT<br>DigiKeyboard.sendKeyStroke(KEY_ENTER);<br>DigiKeyboard.delay(600);<br>//DISABLE C1E SUPPORT<br>DigiKeyboard.sendKeyStroke(KEY_UP_ARROW);<br>DigiKeyboard.delay(600);<br>DigiKeyboard.sendKeyStroke(KEY_ENTER);<br>DigiKeyboard.delay(600);<br>//SAVE &amp;&amp; EXIT<br>DigiKeyboard.sendKeyStroke(KEY_F10);<br>DigiKeyboard.delay(600);<br>DigiKeyboard.sendKeyStroke(KEY_ENTER);<br>}</p>        <h1 id="编译失败了">          <a href="#编译失败了" class="heading-link"><i class="fas fa-link"></i></a><a href="#编译失败了" class="headerlink" title="编译失败了"></a>编译失败了</h1>      <p>const unsigned char ascii_to_scan_code_table [119]‘ previously defined here<br>const unsigned char ascii_to_scan_code_table[] PROGMEM = {</p><p>这个错误由<code>digispark.h</code>中键位表不全所致。代码中如出现<code>KEY_RIGHT_ARROW</code>等未定义的键时会导致编译出错。 在<code>digispark.h</code>中补全键位表即可</p><p>#define KEY_UP_ARROW 0x52<br>#define KEY_DOWN_ARROW 0x51<br>#define KEY_LEFT_ARROW 0x50<br>#define KEY_RIGHT_ARROW 0x4F<br>#define KEY_ESC 0x29</p><p><a href="https://i.loli.net/2021/03/21/SbuWnvKVU5BrYzh.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://i.loli.net/2021/03/21/SbuWnvKVU5BrYzh.png">      </a></p>        <h1 id="并不能正常工作">          <a href="#并不能正常工作" class="heading-link"><i class="fas fa-link"></i></a><a href="#并不能正常工作" class="headerlink" title="并不能正常工作"></a>并不能正常工作</h1>      <p>好欸，BIOS认digispark是个键盘了 等 再等 再等等 并没有反应 在digispark论坛中，很多人反应digispark模拟的hid键盘并不能在BIOS中使用 <span class="exturl"><a class="exturl__link" href="https://digistump.com/board/index.php?topic=1096.0" title="https://digistump.com/board/index.php?topic=1096.0">https://digistump.com/board/index.php?topic=1096.0</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <span class="exturl"><a class="exturl__link" href="https://digistump.com/board/index.php?topic=2922.0" title="https://digistump.com/board/index.php?topic=2922.0">https://digistump.com/board/index.php?topic=2922.0</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 有大佬提出通过替换<code>digispark.h</code>和<code>usbconfig.h</code>文件可以解决这个问题<span class="exturl"><a class="exturl__link" href="https://github.com/bkgarry/DigikeyboardBIOS">https://github.com/bkgarry/DigikeyboardBIOS</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>These two files (DigiKeyboard.h and usbconfig.h) replace the original digikeyboard files in the following windows directory.<br>%localappdata%\Arduino15\packages\digistump\hardware\avr\1.6.7\libraries\DigisparkKeyboard<br>(please note that the path may change for different versions of the digistump files and Arduino IDE)</p><p>%localappdata% is the environmental variable to take you to your user’s local appdata so the path will work.</p><p>Once these files have been replaced, recompile your existing code to your digispark and you will be able to use the same script to run your keyboard commands within a system BIOS)</p></blockquote>        <h1 id="Working">          <a href="#Working" class="heading-link"><i class="fas fa-link"></i></a><a href="#Working" class="headerlink" title="Working"></a>Working</h1>      <p>[dogevideo]0314c74e2e4534b5[/dogevideo] <a href="https://i.loli.net/2021/04/11/Wa3gVdvxGiuzPXD.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://i.loli.net/2021/04/11/Wa3gVdvxGiuzPXD.jpg" alt="长这样">      </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[collapse title=”故事背景”]有一个穷鬼，十分喜欢折腾电脑硬件，可他的父母并不支持他的兴趣爱好，他们认为生为学生就应该心无杂念的一心想着读书。几年过去了，穷鬼的电脑开始渐渐的赶不上时代了，他看了看他的CPU，不由自主地叹了口气：“Pentium E5300…&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>DIY适马佳能AF镜头兼容性修复(\&quot;rechip\&quot;)</title>
    <link href="https://whrblog.online/2020/12/22/diy%E9%80%82%E9%A9%AC%E4%BD%B3%E8%83%BDaf%E9%95%9C%E5%A4%B4%E5%85%BC%E5%AE%B9%E6%80%A7%E4%BF%AE%E5%A4%8Drechip/"/>
    <id>https://whrblog.online/2020/12/22/diy%E9%80%82%E9%A9%AC%E4%BD%B3%E8%83%BDaf%E9%95%9C%E5%A4%B4%E5%85%BC%E5%AE%B9%E6%80%A7%E4%BF%AE%E5%A4%8Drechip/</id>
    <published>2020-12-22T10:34:51.000Z</published>
    <updated>2021-08-21T06:04:00.848Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<span class="exturl"><a class="exturl__link" href="https://github.com/marcan/sigmafix">Github</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> &amp; <span class="exturl"><a class="exturl__link" href="https://twitter.com/marcan42/status/1046781328148979712?s=09" title="@marcan42">Twitter</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>翻译/校对：<span class="exturl"><a class="exturl__link" href="https://2890.ltd/">Given</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>使用佳能EF卡口的旧的适马镜头不能在新的佳能机身上工作，因为适马不完全反向工程EF协议，没有实现所有需要的命令。这是一个DIY修复方法，使用ATtiny13单片机来修改协议，使镜头重新兼容数码EOS机身。</p><span id="more"></span><p>有些人喜欢称之为 “rechip”，”rechip”实际上是指官方的修复，包括更换镜头中的芯片。但这个修正是一个附加的修正，并没有替换镜头中现有的芯片，所以更应该称之为 “modchip”。</p><hr>        <h1 id="功能介绍">          <a href="#功能介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1>      <p>**<em>低功耗</em>**：该修复在活动模式下（例如拍摄、自动对焦、实时视图模式或更改镜头设置时）消耗约500µA，在睡眠模式下（在标准模式下或相机关闭时，在几秒钟不活动后自动进入）消耗不到1µA。因此，它不会对电池寿命产生可衡量的影响。 **<em>被动式</em>**：本方案不像其他方案那样通过DCL线路由MCU处理，而是使用一个电阻，仅在必要时主动覆盖DCL。因此，在协议的正常运行中，它的影响为零，只改变需要改变的一个位。 **<em>正确的EF协议</em>**：与其他版本不同，这个版本正确解析EF协议，并跟踪命令长度。它还有一个超时功能，如果出了问题，可以与命令重新同步。 [dogevideo]57b05519765a9df3[/dogevideo]</p><hr>        <h1 id="编译">          <a href="#编译" class="heading-link"><i class="fas fa-link"></i></a><a href="#编译" class="headerlink" title="编译"></a><span class="exturl"><a class="exturl__link" href="https://github.com/wanghurui/sigmafix/releases/tag/1.0">编译</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h1>      <p>输入<code>make</code>来编译工程(需要avra编译器)，或者<code>make flash</code>来用avrdude flash (默认使用 usbtiny 编译器，但你可以使用 <code>make PROGRAMMER=foo</code>来改变编译器类型)。如果你使用其他的编程方法，不要忘了刷写保险丝 （<code>LFUSE=0x72 HFUSE=0xfb</code>）。</p><hr>        <h1 id="安装方法">          <a href="#安装方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1>      <p>安装时，需要剪断相机到镜头的DCL线，并在线路上插入一个220Ω的电阻，然后将编程后的ATtiny13接上，如下图所示。</p><pre><code>                             Camera side                =========================================                DGND  LCLK  DLC  DCL  VDD  PGND/DET  VBAT                                                  ATtiny13    ,------------------------+              \_\_\_\_\_\_\_\_\_\_                                    o                           \\                 </code></pre><p>   1RESET  VCC8-‘             220/<br>   2PB3    PB27                Ω \<br>   3PB4    PB16———-+         /<br> ,-4GND    PB05———————+<br>   __________<br> `——————-+                               </p><pre><code>                DGND  LCLK  DLC  DCL  VDD  PGND/DET  VBAT                =========================================                                Lens side</code></pre><p><a href="https://cdn.hyh.ink/imger/2020/12/21/sigmafix_lens_diagram.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://cdn.hyh.ink/imger/2020/12/21/sigmafix_lens_diagram.jpg" alt="安装示例">      </a></p><hr>        <h1 id="问题">          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题" class="headerlink" title="问题"></a>问题</h1>      <p>佳能EF镜头同时接受<code>12 YY</code>和<code>13 YY</code>两个命令，以<code>YY</code>步数（符号为uint8）改变光圈。旧的胶片佳能机身使用<code>12 YY</code>，而新的数码机身使用<code>13 YY</code>。看来适马并没有通过尝试所有可能的命令来完全逆向工程协议，而只是实现了当时佳能机身使用的命令。因此，老的适马镜头只支持<code>12 YY</code>。如果这样的镜头用在新机身上，光圈永远不会移动。光圈有一个位子反馈给相机：是否在全开位置。相机会根据它所期望的光圈位置来检查这一点。因此，这些老镜头的行为如下：如果光圈是大开（常见情况），镜头只会在相机光圈设置为全开（匹配）的情况下拍摄，否则相机会抛出一个错误。如果光圈不是全开（比如被手动移动了，或者在关机时取下了镜头），那么相机会允许用其他光圈设置拍照，但光圈当然也不会移动。</p><hr>        <h1 id="解决方法">          <a href="#解决方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1>      <p>把命令13补成命令12。他们之间只有一个比特的差异差。由于协议是MSB优先，所以只要前面7个位都收到后，即可完成，也就是说不需要延迟或缓冲协议，而是可以近乎实时完成。</p><hr>        <h1 id="原理">          <a href="#原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#原理" class="headerlink" title="原理"></a>原理</h1>      <p>代码的大部分时间都是处于在睡眠模式下的。当LCLK为低电平时（在命令开始时），它通过低电平INT0中断唤醒芯片。中断处理程序什么也不做，只是从掉电模式返回。然后，主程序禁用中断以防止其重新启动，并接收命令字节。唤醒延迟是这样的：当LCLK为高电平时，芯片正好可以对第一个命令位进行采样，这是预期的采样时间。 在接收到7个命令位后，代码会检查命令0x12/0x13。如果命令匹配，则等待下一个位周期，然后强制DCL为低。这将任何0x13命令改写成0x12，然后等待镜头通过LCLK脉冲确认命令。 由于命令可以有参数，而且没有明确的框架来区分参数和命令，因此代码中包含了所有256个可能的命令以及预期参数长度的表格（根据佳能镜头进行检查）。如果有任何参数字节，它就会读取这些字节，而不进行任何进一步的处理，然后回到睡眠模式，等待下一条命令。 为了在出现故障时实现超时，定时器0设置了0-700µs的超时，并在每个命令开始时启动，同时允许中断。只有当镜头应答一个命令时，它才会停止。如果定时器过期，它就会触发一个中断，该中断不会返回，而是从复位向量重新启动整个程序。这与佳能镜头的行为类似，如果一个命令字节的时间超过700µs，它将启动一个协议复位。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;原文：&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://github.com/marcan/sigmafix&quot;&gt;Github&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt; &amp;amp; &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://twitter.com/marcan42/status/1046781328148979712?s=09&quot; title=&quot;@marcan42&quot;&gt;Twitter&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;翻译/校对：&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://2890.ltd/&quot;&gt;Given&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;使用佳能EF卡口的旧的适马镜头不能在新的佳能机身上工作，因为适马不完全反向工程EF协议，没有实现所有需要的命令。这是一个DIY修复方法，使用ATtiny13单片机来修改协议，使镜头重新兼容数码EOS机身。&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="IT" scheme="https://whrblog.online/tags/IT/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>DIY Arduino 入射式测光表</title>
    <link href="https://whrblog.online/2020/11/23/diy-arduino-%E5%85%A5%E5%B0%84%E5%BC%8F%E6%B5%8B%E5%85%89%E8%A1%A8/"/>
    <id>https://whrblog.online/2020/11/23/diy-arduino-%E5%85%A5%E5%B0%84%E5%BC%8F%E6%B5%8B%E5%85%89%E8%A1%A8/</id>
    <published>2020-11-23T11:24:46.000Z</published>
    <updated>2021-08-21T02:42:53.901Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>A Lightmeter/Flashmeter for photographers, based on Arduino. Components: 1. Arduino NANO v.3 2. BH1750 light sensor 3. SSD1306 128*96 OLED SPI Display 4. Buttons Thanks @morozgrafix <span class="exturl"><a class="exturl__link" href="https://github.com/morozgrafix">https://github.com/morozgrafix</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for creating schematic diagram for this device. The lightmeter based on Arduino as a main controller and BH1750 as a metering cell. Information is displayed on SSD1306 OLED display. The device is powered by 2 AAA batteries. Functions list:</p><ul><li>  Ambient light metering</li><li>  Flash light metering</li><li>  ND filter correction</li><li>  Aperture priority</li><li>  Shutter speed priority</li><li>  ISO range 8 - 4 000 000</li><li>  Aperture range 1.0 - 3251</li><li>  Shutter speed range 1/10000 - 133 sec</li><li>  ND Filter range ND2 - ND8192</li><li>  Displaying amount of light in Lux.</li><li>  Displaying exposure value, EV</li><li>  Recalculating exposure pair while one of the parameter changing</li><li>  Battery information</li><li>  Power 2xAAA LR03 batteries</li></ul><p>Detailed information on my site: <span class="exturl"><a class="exturl__link" href="https://www.pominchuk.com/lightmeter/">https://www.pominchuk.com/lightmeter/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><span id="more"></span><p><strong><em>！！！此简易测光表对付负片足以！！！</em></strong></p><p><strong><em>！！！如果用于正片或是需要精确曝光的环境请使用商业测光表！！！</em></strong></p><p>&nbsp;</p><hr>        <h1 id="所需元件">          <a href="#所需元件" class="heading-link"><i class="fas fa-link"></i></a><a href="#所需元件" class="headerlink" title="所需元件"></a>所需元件</h1>      <ul><li>主机<ol><li> Arduino nano</li><li> BH1750光强度模块</li><li> 0.96寸 7针SPI接口oled屏幕（SSD1306）</li><li> 微动开关</li></ol></li><li>供电<ol><li>3v升压5v模块<ul><li>  如果用锂电池供电的话记得换成充电宝升压模块</li></ul></li><li>电池<ul><li>  可以用两节AAA电池</li><li>  或者使用CR123等一次性锂电池</li><li>  或者用锂电池</li></ul></li><li> 拨动开关</li></ol></li></ul><p><a href="https://cdn.rec709.cf/imgs/2020/11/b9f6cd1dc4f2a9bf.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://cdn.rec709.cf/imgs/2020/11/b9f6cd1dc4f2a9bf.png">      </a><a href="https://cdn.rec709.cf/imgs/2020/11/b8309eb963aba09c.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://cdn.rec709.cf/imgs/2020/11/b8309eb963aba09c.png">      </a></p>        <h1 id="设计PCB">          <a href="#设计PCB" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计PCB" class="headerlink" title="设计PCB"></a>设计PCB</h1>      <ul><li>  ☑ 尺寸5*5</li><li>  ☑ 独立供电模块</li><li>  ☑ 独立开关</li><li>❎ CR2032供电<ul><li>供电不足<ul><li>  改用CR123A供电</li></ul></li></ul></li><li>  🔄 设计底板</li></ul><hr>        <h1 id="源码-amp-amp-焊接">          <a href="#源码-amp-amp-焊接" class="heading-link"><i class="fas fa-link"></i></a><a href="#源码-amp-amp-焊接" class="headerlink" title="源码&amp;&amp;焊接"></a>源码&amp;&amp;焊接</h1>      <p>#include &lt;SPI.h&gt;<br>#include &lt;Wire.h&gt;<br>#include &lt;Adafruit_GFX.h&gt;<br>#include &lt;Adafruit_SSD1306.h&gt;<br>#include &lt;BH1750.h&gt;<br>#include &lt;EEPROM.h&gt;<br>#include &lt;avr/sleep.h&gt;<br>#define SCREEN_WIDTH 128 // OLED display width, in pixels<br>#define SCREEN_HEIGHT 64 // OLED display height, in pixels</p><p>// Declaration for SSD1306 display connected using software SPI (default case):<br>#define OLED_DC                 11<br>#define OLED_CS                 12<br>#define OLED_CLK                8 //10<br>#define OLED_MOSI               9 //9<br>#define OLED_RESET              10 //13<br>Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,<br>  OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);</p><p>BH1750 lightMeter;</p><p>#define DomeMultiplier          2.17                    // Multiplier when using a white translucid Dome covering the lightmeter<br>#define MeteringButtonPin       2                       // Metering button pin<br>#define PlusButtonPin           3                       // Plus button pin<br>#define MinusButtonPin          4                       // Minus button pin<br>#define ModeButtonPin           5                       // Mode button pin<br>#define MenuButtonPin           6                       // ISO button pin<br>#define MeteringModeButtonPin   7                       // Metering Mode (Ambient / Flash)<br>//#define PowerButtonPin          2</p><p>#define MaxISOIndex             57<br>#define MaxApertureIndex        70<br>#define MaxTimeIndex            80<br>#define MaxNDIndex              13<br>#define MaxFlashMeteringTime    5000                    // ms</p><p>float   lux;<br>boolean Overflow = 0;                                   // Sensor got Saturated and Display “Overflow”<br>float   ISOND;<br>boolean ISOmode = 0;<br>boolean NDmode = 0;</p><p>boolean PlusButtonState;                // “+” button state<br>boolean MinusButtonState;               // “-“ button state<br>boolean MeteringButtonState;            // Metering button state<br>boolean ModeButtonState;                // Mode button state<br>boolean MenuButtonState;                // ISO button state<br>boolean MeteringModeButtonState;        // Metering mode button state (Ambient / Flash)</p><p>boolean ISOMenu = false;<br>boolean NDMenu = false;<br>boolean mainScreen = false;</p><p>// EEPROM for memory recording<br>#define ISOIndexAddr        1<br>#define apertureIndexAddr   2<br>#define modeIndexAddr       3<br>#define T_expIndexAddr      4<br>#define meteringModeAddr    5<br>#define ndIndexAddr         6</p><p>#define defaultApertureIndex 12<br>#define defaultISOIndex      11<br>#define defaultModeIndex     0<br>#define defaultT_expIndex    19</p><p>uint8_t ISOIndex =          EEPROM.read(ISOIndexAddr);<br>uint8_t apertureIndex =     EEPROM.read(apertureIndexAddr);<br>uint8_t T_expIndex =        EEPROM.read(T_expIndexAddr);<br>uint8_t modeIndex =         EEPROM.read(modeIndexAddr);<br>uint8_t meteringMode =      EEPROM.read(meteringModeAddr);<br>uint8_t ndIndex =           EEPROM.read(ndIndexAddr);</p><p>int battVolts;<br>#define batteryInterval 10000<br>double lastBatteryTime = 0;</p><p>#include “lightmeter.h”</p><p>void setup() {<br>  pinMode(PlusButtonPin, INPUT_PULLUP);<br>  pinMode(MinusButtonPin, INPUT_PULLUP);<br>  pinMode(MeteringButtonPin, INPUT_PULLUP);<br>  pinMode(ModeButtonPin, INPUT_PULLUP);<br>  pinMode(MenuButtonPin, INPUT_PULLUP);<br>  pinMode(MeteringModeButtonPin, INPUT_PULLUP);</p><p>  //Serial.begin(115200);</p><p>  battVolts = getBandgap();  //Determins what actual Vcc is, (X 100), based on known bandgap voltage</p><p>  Wire.begin();<br>  lightMeter.begin(BH1750::ONE_TIME_HIGH_RES_MODE_2);<br>  //lightMeter.begin(BH1750::ONE_TIME_LOW_RES_MODE); // for low resolution but 16ms light measurement time.</p><p>  display.begin(SSD1306_SWITCHCAPVCC, 0x3D);<br>  display.setTextColor(WHITE);<br>  display.clearDisplay();</p><p>  // IF NO MEMORY WAS RECORDED BEFORE, START WITH THIS VALUES otherwise it will read “255”<br>  if (apertureIndex &gt; MaxApertureIndex) {<br>    apertureIndex = defaultApertureIndex;<br>  }</p><p>  if (ISOIndex &gt; MaxISOIndex) {<br>    ISOIndex = defaultISOIndex;<br>  }</p><p>  if (T_expIndex &gt; MaxTimeIndex) {<br>    T_expIndex = defaultT_expIndex;<br>  }</p><p>  if (modeIndex &lt; 0  modeIndex &gt; 1) {<br>    // Aperture priority. Calculating shutter speed.<br>    modeIndex = 0;<br>  }</p><p>  if (meteringMode &gt; 1) {<br>    meteringMode = 0;<br>  }</p><p>  if (ndIndex &gt; MaxNDIndex) {<br>    ndIndex = 0;<br>  }</p><p>  lux = getLux();<br>  refresh();<br>}</p><p>void loop() {<br>  if (millis() &gt;= lastBatteryTime + batteryInterval) {<br>    lastBatteryTime = millis();<br>    battVolts = getBandgap();<br>  }</p><p>  readButtons();</p><p>  menu();</p><p>  if (MeteringButtonState == 0) {<br>    // Save setting if Metering button pressed.<br>    SaveSettings();</p><pre><code>lux = 0;refresh();if (meteringMode == 0) {  // Ambient light meter mode.  lightMeter.configure(BH1750::ONE\_TIME\_HIGH\_RES\_MODE\_2);  lux = getLux();  if (Overflow == 1) {    delay(10);    getLux();  }  refresh();  delay(200);} else if (meteringMode == 1) {  // Flash light metering  lightMeter.configure(BH1750::CONTINUOUS\_LOW\_RES\_MODE);  unsigned long startTime = millis();  uint16\_t currentLux = 0;  lux = 0;  while (true) {    // check max flash metering time    if (startTime + MaxFlashMeteringTime &lt; millis()) { break; } currentLux = getLux(); delay(16); if (currentLux &gt; lux) {      lux = currentLux;    }  }  refresh();}</code></pre><p>  }<br>}</p><p>&nbsp;</p><ul><li>  <span class="exturl"><a class="exturl__link" href="https://od.rec709.cf/%F0%9F%8D%8CArduino%E6%B5%8B%E5%85%89%E8%A1%A8/%E6%BA%90%E7%A0%81/lightmeter/">lightmeter.ino</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>  <span class="exturl"><a class="exturl__link" href="https://od.rec709.cf/%F0%9F%8D%8CArduino%E6%B5%8B%E5%85%89%E8%A1%A8/%E5%BA%93%E6%96%87%E4%BB%B6/Adafruit_Circuit_Playground.zip">Adafruit_Circuit_Playground</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>  <span class="exturl"><a class="exturl__link" href="https://od.rec709.cf/%F0%9F%8D%8CArduino%E6%B5%8B%E5%85%89%E8%A1%A8/%E5%BA%93%E6%96%87%E4%BB%B6/Adafruit_Sensor-master.zip">Adafruit_Sensor-master</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>  <span class="exturl"><a class="exturl__link" href="https://od.rec709.cf/%F0%9F%8D%8CArduino%E6%B5%8B%E5%85%89%E8%A1%A8/%E5%BA%93%E6%96%87%E4%BB%B6/Adafruit_SSD1306-master.zip">Adafruit_SSD1306-master</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>  <span class="exturl"><a class="exturl__link" href="https://od.rec709.cf/%F0%9F%8D%8CArduino%E6%B5%8B%E5%85%89%E8%A1%A8/%E5%BA%93%E6%96%87%E4%BB%B6/Adafruit-GFX-Library-master.zip">Adafruit-GFX-Library-master</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>  <span class="exturl"><a class="exturl__link" href="https://od.rec709.cf/%F0%9F%8D%8CArduino%E6%B5%8B%E5%85%89%E8%A1%A8/%E5%BA%93%E6%96%87%E4%BB%B6/BH1750-master.zip">BH1750-master</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><hr><p><a href="https://cdn.rec709.cf/imgs/2020/11/ea5d819c1594b056.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://cdn.rec709.cf/imgs/2020/11/ea5d819c1594b056.jpg">      </a> <a href="https://cdn.rec709.cf/imgs/2020/11/a67161e94bfcbf8f.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://cdn.rec709.cf/imgs/2020/11/a67161e94bfcbf8f.jpg">      </a> <a href="https://cdn.rec709.cf/imgs/2020/11/8e8f31e17e16778c.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://cdn.rec709.cf/imgs/2020/11/8e8f31e17e16778c.jpg">      </a> <a href="https://cdn.rec709.cf/imgs/2020/11/84c4e9e1489c57b9.jpeg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://cdn.rec709.cf/imgs/2020/11/84c4e9e1489c57b9.jpeg">      </a> DIY测光表测光模式相当于相机内中央平均测光。在大多数拍摄情况下中央平均测光是一种非常实用的测光模式，在拍摄人像旅游照等对于中央亮度起到决定性作用的拍摄场景时，应用广泛。</p><hr>        <h1 id="Bugs">          <a href="#Bugs" class="heading-link"><i class="fas fa-link"></i></a><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h1>      <p>❌ 大E了</p><ol><li> ❌板子上画的是CR2032的电池尺寸，装起来发现带不动测光表</li><li> ❌ 供电模块画反了</li></ol><hr>        <h1 id="样片">          <a href="#样片" class="heading-link"><i class="fas fa-link"></i></a><a href="#样片" class="headerlink" title="样片"></a>样片</h1>      <p><em>咕咕咕</em></p><p>&nbsp;</p><p>2020.11.23</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;A Lightmeter/Flashmeter for photographers, based on Arduino. Components: 1. Arduino NANO v.3 2. BH1750 light sensor 3. SSD1306 128*96 OLED SPI Display 4. Buttons Thanks @morozgrafix &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://github.com/morozgrafix&quot;&gt;https://github.com/morozgrafix&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt; for creating schematic diagram for this device. The lightmeter based on Arduino as a main controller and BH1750 as a metering cell. Information is displayed on SSD1306 OLED display. The device is powered by 2 AAA batteries. Functions list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  Ambient light metering&lt;/li&gt;
&lt;li&gt;  Flash light metering&lt;/li&gt;
&lt;li&gt;  ND filter correction&lt;/li&gt;
&lt;li&gt;  Aperture priority&lt;/li&gt;
&lt;li&gt;  Shutter speed priority&lt;/li&gt;
&lt;li&gt;  ISO range 8 - 4 000 000&lt;/li&gt;
&lt;li&gt;  Aperture range 1.0 - 3251&lt;/li&gt;
&lt;li&gt;  Shutter speed range 1/10000 - 133 sec&lt;/li&gt;
&lt;li&gt;  ND Filter range ND2 - ND8192&lt;/li&gt;
&lt;li&gt;  Displaying amount of light in Lux.&lt;/li&gt;
&lt;li&gt;  Displaying exposure value, EV&lt;/li&gt;
&lt;li&gt;  Recalculating exposure pair while one of the parameter changing&lt;/li&gt;
&lt;li&gt;  Battery information&lt;/li&gt;
&lt;li&gt;  Power 2xAAA LR03 batteries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed information on my site: &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://www.pominchuk.com/lightmeter/&quot;&gt;https://www.pominchuk.com/lightmeter/&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="IT" scheme="https://whrblog.online/tags/IT/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Untitled Post - 7</title>
    <link href="https://whrblog.online/2020/08/16/1615/"/>
    <id>https://whrblog.online/2020/08/16/1615/</id>
    <published>2020-08-16T01:47:43.000Z</published>
    <updated>2021-08-21T02:42:53.885Z</updated>
    
    <content type="html"><![CDATA[<p>人的价值和意义不是他人，也不是社会所决定的，而是内心神圣的道德准则。一如康德言：有两件事物我愈思考愈觉神奇，心中也愈充满敬畏，那是我头顶上的星空与我内心的道德准则。</p><p>2020.8.15</p><span id="more"></span><p><a href="https://i.loli.net/2020/08/16/TfWgarpkzPQowHe.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://i.loli.net/2020/08/16/TfWgarpkzPQowHe.jpg">      </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;人的价值和意义不是他人，也不是社会所决定的，而是内心神圣的道德准则。一如康德言：有两件事物我愈思考愈觉神奇，心中也愈充满敬畏，那是我头顶上的星空与我内心的道德准则。&lt;/p&gt;
&lt;p&gt;2020.8.15&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="Date" scheme="https://whrblog.online/tags/Date/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="行者笔记" scheme="https://whrblog.online/tags/%E8%A1%8C%E8%80%85%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>用ESP8266扩展家中局域网</title>
    <link href="https://whrblog.online/2020/08/07/%E7%94%A8esp8266%E6%89%A9%E5%B1%95%E5%AE%B6%E4%B8%AD%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
    <id>https://whrblog.online/2020/08/07/%E7%94%A8esp8266%E6%89%A9%E5%B1%95%E5%AE%B6%E4%B8%AD%E5%B1%80%E5%9F%9F%E7%BD%91/</id>
    <published>2020-08-07T08:51:22.000Z</published>
    <updated>2021-08-21T02:42:53.873Z</updated>
    
    <content type="html"><![CDATA[<p>via <span class="exturl"><a class="exturl__link" href="https://github.com/rubfi/esp_wifi_repeater">https://github.com/rubfi/esp_wifi_repeater</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><h1 id=""><a href="#" class="headerlink" title=""></a><a href="https://image.krunk.cn/images/2020/08/07/image66b4119bcffcf74e.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/08/07/image66b4119bcffcf74e.png">      </a></h1>        <h1 id="ESP无线中继器">          <a href="#ESP无线中继器" class="heading-link"><i class="fas fa-link"></i></a><a href="#ESP无线中继器" class="headerlink" title="ESP无线中继器"></a>ESP无线中继器</h1>      <p>这是一个在esp8266作为WiFi NAT路由器的概念和实现。它可以作为现有WiFi网络的无线AP扩展。esp以STA和soft-AP模式透明转发任何IP的流量。因为它使用NAT转发，所以在网络端和连接的站点上都不需要路由条目。站点在192.168.4.0/24网络中默认通过DHCP配置，并从现有的WiFi网络接收其DNS地址。 经过测试，ESP无线中继器可以在两个方向上实现约 5 Mbps，因此即使流媒体也是可能的。ESP无线中继器还允许远程监控（或数据包嗅探），例如使用 Wireshark。</p><span id="more"></span>        <h1 id="烧录">          <a href="#烧录" class="heading-link"><i class="fas fa-link"></i></a><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h1>      <p>在 Windows 上，可以使用”ESP8266 下载工具”在 <span class="exturl"><a class="exturl__link" href="https://espressif.com/en/support/download/other-tools">https://espressif.com/en/support/download/other-tools</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 从固件目录下载两个文件 0x000000.bin 和 0x10000.bin。<em>（对于 ESP-01，将闪存大小更改为”8Mbit”）</em></p><blockquote><p>使用 V2.0.0 SDK 编译的固件无法在某些 ESP-01 模块上启动。如果遇到这些问题，请使用目录firmware_sdk_1.5.4（地址 0x00000 和 0x40000）。 我用的D1 mini也只能用firmware_sdk_1.5.4编译的固件启动</p></blockquote><p><a href="https://image.krunk.cn/images/2020/08/07/image.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/08/07/image.png">      </a></p>        <h1 id="使用">          <a href="#使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用" class="headerlink" title="使用"></a>使用</h1>      <p>固件烧录完成后可以使用putty连接ESP的com口，波特率115200以修改固件默认配置 <a href="https://image.krunk.cn/images/2020/08/07/image5a41c56eb0cdadb9.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/08/07/image5a41c56eb0cdadb9.png">      </a> 固件从以下默认配置开始:</p><ul><li>  ssid: ssid, pasword: password</li><li>  ap_ssid: MyAP, ap_password: none, ap_on: 1, ap_open: 1</li><li>  network: 192.168.4.0/24</li></ul><p>这意味着它通过AP sid，密码连接到互联网，并提供一个开放的AP与ap_ssid:MyAP。此默认值可以在文件user_config. h 中更改。可以使用控制台接口覆盖默认值并持续保存为闪存。此控制台可通过 115200 波特的串行端口或 tcp 端口 7777（例如，从连接的 STA 获得”telnet 192.168.4.1 7777”）。 控制台使用以下命令:</p><ul><li>  help: prints a short help message</li><li>  show [configstats]: prints the current config or some statistics&nbsp; <em>eg：show config</em></li><li>set [ssidpasswordap_ssidap_password]&nbsp;<em>value</em>: changes the named config parameter&nbsp;  set ssid TP-LINK_B9C0  &nbsp;  set password ！@#￥%……&amp;*（（  &nbsp;</li><li>  set ap_open [01]: selects, wheter the soft-AP uses WPA2 security (ap_open=0) or no password (ap_open=1)</li><li>  set ap_on [01]: selects, wheter the soft-AP is disabled (ap_on=0) or enabled (ap_on=1)</li><li>  set network&nbsp;<em>ip-addr</em>: sets the IP address of the internal network, network is always /24, router is always x.x.x.1</li><li>  set speed [80160]: sets the CPU clock frequency</li><li>  set vmin&nbsp;<em>voltage</em>: sets the minimum battery voltage in mV. If Vdd drops below, the ESP goes into deep sleep. If 0, nothing happens</li><li>  set vmin_sleep&nbsp;<em>time</em>: sets the time interval in seconds the ESP sleeps on low voltage</li><li>  set config_port&nbsp;<em>portno</em>: sets the port number of the console login (default is 7777, 0 disables remote console config)</li><li>  portmap add [TCPUDP]&nbsp;<em>external_port</em>&nbsp;<em>internal_ip</em>&nbsp;<em>internal_port</em>: adds a port forwarding</li><li>  portmap remove [TCPUDP]&nbsp;<em>external_port</em>: deletes a port forwarding</li><li>  save [dhcp]: saves the current config parameters [+ the current DHCP leases] to flash</li><li>  quit: terminates a remote session</li><li>  reset [factory]: resets the esp, optionally resets WiFi params to default values</li><li>  lock: locks the current config, changes are not allowed</li><li>  unlock&nbsp;<em>password</em>: unlocks the config, requires password of the network AP</li><li>  scan: does a scan for APs</li><li>  monitor [onoff]&nbsp;<em>port</em>: starts and stops monitor server on a given port</li></ul><p><a href="https://image.krunk.cn/images/2020/08/07/image40a310f55c3654de.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/08/07/image40a310f55c3654de.png">      </a></p>        <h1 id="状态指示灯">          <a href="#状态指示灯" class="heading-link"><i class="fas fa-link"></i></a><a href="#状态指示灯" class="headerlink" title="状态指示灯"></a>状态指示灯</h1>      <p>在默认配置 GPIO2 配置驱动器状态 LED（连接到 GND）与以下指示：</p><ul><li>  常亮：已启动，但未成功连接到 AP</li><li>  闪烁（1 秒）：工作，连接到 AP</li><li>  非正常闪烁：工作，内部网络中的流量</li></ul><p>在user_config.h 中，可以配置备用 GPIO 端口。当配置为 GPIO1 时，它可与 ESP-01 板上的蓝色 LED 一起使用。但是，由于 GPIO1 ist 也是 UART-TX 引脚，这意味着串行控制台不工作。</p>        <h1 id="MQTT-支持">          <a href="#MQTT-支持" class="heading-link"><i class="fas fa-link"></i></a><a href="#MQTT-支持" class="headerlink" title="MQTT 支持"></a>MQTT 支持</h1>      <p>自版本 1.3 以来，路由器具有一个构建中的 MQTT 客户端（感谢 Tuan PM的库<span class="exturl"><a class="exturl__link" href="https://github.com/tuanpmt/esp_mqtt">https://github.com/tuanpmt/esp_mqtt</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。这可以帮助将路由器/中继器集成到 IoT 中。家庭自动化系统可以例如，根据有关当前关联站的信息做出决策，它可以打开和中继器（例如，根据时间安排），或者简单地用于监视负载。路由器可以连接到本地 MQTT 代理或云中的公开代理。但是，当前它不支持 TLS 加密。 默认情况下，MQTT 客户端处于禁用状态。可以通过将配置参数”mqtt_host”设置为不同于”无”的主机名来启用它。要配置 MQTT，可以设置以下参数：</p><ul><li>  set mqtt_host&nbsp;<em>IP_or_hostname</em>: IP or hostname of the MQTT broker (“none” disables the MQTT client)</li><li>  set mqtt_user&nbsp;<em>username</em>: Username for authentication (“none” if no authentication is required at the broker)</li><li>  set mqtt_user&nbsp;<em>password</em>: Password for authentication</li><li>  set mqtt_id&nbsp;<em>clientId</em>: Id of the client at the broker (default: “ESPRouter_xxxxxx” derived from the MAC address)</li><li>  set mqtt_prefix&nbsp;<em>prefix_path</em>: Prefix for all published topics (default: “/WiFi/ESPRouter_xxxxxx/system”, again derived from the MAC address)</li><li>  set mqtt_command_topic&nbsp;<em>command_topic</em>: Topic subscribed to receive commands, same as from the console. (default: “/WiFi/ESPRouter_xxxxxx/command”, “none” disables commands via MQTT)</li><li>  set mqtt_interval&nbsp;<em>secs</em>: Set the interval in which the router publishs status topics (default: 15s, 0 disables status publication)</li><li>  set mqtt_mask&nbsp;<em>mask_in_hex</em>: Selects which topics are published (default: “ffff” means all)</li></ul><p>MQTT 参数可以使用”显示 mqtt”命令显示。</p><ul><li>  <em>prefix_path</em>/Uptime: System uptime since last reset in s (mask: 0x0020)</li><li>  <em>prefix_path</em>/Vdd: Voltage of the power supply in mV (mask: 0x0040)</li><li>  <em>prefix_path</em>/Bpsin: Bytes/s from stations into the AP (mask: 0x0800)</li><li>  <em>prefix_path</em>/Bpsout: Bytes/s from the AP to stations (mask: 0x1000)</li><li>  <em>prefix_path</em>/Ppsin: Packets/s from stations into the AP (mask: 0x0200)</li><li>  <em>prefix_path</em>/Ppsout: Packets/s from the AP to stations (mask: 0x0400)</li><li>  <em>prefix_path</em>/Bin: Total bytes from stations into the AP (mask: 0x0080)</li><li>  <em>prefix_path</em>/Bout: Total bytes from the AP to stations (mask: 0x0100)</li><li>  <em>prefix_path</em>/NoStations: Number of stations currently connected to the AP (mask: 0x2000)</li><li>  <em>prefix_path</em>/join: MAC address of a station joining the AP (mask: 0x0008)</li><li>  <em>prefix_path</em>/leave: MAC address of a station leaving the AP (mask: 0x0010)</li><li>  <em>prefix_path</em>/IP: IP address of the router when received via DHCP (mask: 0x0002)</li><li>  <em>prefix_path</em>/ScanResult: Separate topic for the results of a “scan” command (one message per found AP) (mask: 0x0004)</li><li>  <em>prefix_path</em>/response: The router publishes on this topic the command line output (mask: 0x0001)</li></ul>        <h1 id="电源管理">          <a href="#电源管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h1>      <p>中继器监控其电流电源电压（显示在”show stats”命令中）。如果_vmin（_在 mV 中，默认 0）设置为值 &gt; 0，并且电源电压低于此值，则它将进入_深度睡眠模式 vmin_sleep_秒。如果您已将 GPIO16 连接到 RST（很难在 ESP-01 上焊接），它将在此间隔后重新启动，尝试重新连接，并将继续测量。 <a href="https://image.krunk.cn/images/2020/08/07/image9c31a7ebc2011e84.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/08/07/image9c31a7ebc2011e84.png">      </a></p><hr>        <h1 id="运行截图">          <a href="#运行截图" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h1>      <p><a href="https://image.krunk.cn/images/2020/08/12/Z0_GSZR0CDRLTNBEUF.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/08/12/Z0_GSZR0CDRLTNBEUF.png" alt="Z0_GSZR0CDRLTNBEUF.png">      </a> <a href="https://image.krunk.cn/images/2020/08/12/4VQ0LYHQLDXMCM91P.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/08/12/4VQ0LYHQLDXMCM91P.png" alt="4VQ0LYHQLDXMCM91P.png">      </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;via &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://github.com/rubfi/esp_wifi_repeater&quot;&gt;https://github.com/rubfi/esp_wifi_repeater&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://image.krunk.cn/images/2020/08/07/image66b4119bcffcf74e.png&quot;&gt;
        &lt;img class=&quot;lazyload lazyload-gif&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://image.krunk.cn/images/2020/08/07/image66b4119bcffcf74e.png&quot;&gt;
      &lt;/a&gt;&lt;/h1&gt;
        &lt;h1 id=&quot;ESP无线中继器&quot;&gt;
          &lt;a href=&quot;#ESP无线中继器&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#ESP无线中继器&quot; class=&quot;headerlink&quot; title=&quot;ESP无线中继器&quot;&gt;&lt;/a&gt;ESP无线中继器&lt;/h1&gt;
      &lt;p&gt;这是一个在esp8266作为WiFi NAT路由器的概念和实现。它可以作为现有WiFi网络的无线AP扩展。esp以STA和soft-AP模式透明转发任何IP的流量。因为它使用NAT转发，所以在网络端和连接的站点上都不需要路由条目。站点在192.168.4.0/24网络中默认通过DHCP配置，并从现有的WiFi网络接收其DNS地址。 经过测试，ESP无线中继器可以在两个方向上实现约 5 Mbps，因此即使流媒体也是可能的。ESP无线中继器还允许远程监控（或数据包嗅探），例如使用 Wireshark。&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="IT" scheme="https://whrblog.online/tags/IT/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>太阳神HELIOS 44M-4</title>
    <link href="https://whrblog.online/2020/05/07/%E5%A4%AA%E9%98%B3%E7%A5%9Ehelios-44m-4/"/>
    <id>https://whrblog.online/2020/05/07/%E5%A4%AA%E9%98%B3%E7%A5%9Ehelios-44m-4/</id>
    <published>2020-05-07T06:11:20.000Z</published>
    <updated>2021-08-21T02:42:53.865Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://history.whrblog.online/2019/04/07/image-bed-1/20200507134351.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/20200507134351.jpg">      </a></p><span id="more"></span>        <h1 id="Helios-44">          <a href="#Helios-44" class="heading-link"><i class="fas fa-link"></i></a><a href="#Helios-44" class="headerlink" title="Helios 44"></a>Helios 44</h1>      <hr><blockquote><p>&nbsp; Helios 44型135镜头自1950年年初开始研制，基于卡尔-蔡司-耶拿的Biotar 2/58镜头的光学设计，最初被称为“BTK”，即BioTar Krasnogorskij，大意为克拉斯诺戈尔斯克的Biotar镜头。该镜头1958年开始在KMZ工厂正式生产，后来螺口的格里奥斯44镜头搬迁到白俄罗斯明斯克的BELOMO厂生产，卡口镜头依然在KMZ厂生产。1972年，格里奥斯44M问世，标志着该镜头开始向现代镜头演变；1981年格里奥斯44M -4定型，此后逐渐延伸出一个庞大的镜头家族。 Helios 44镜头有多重卡口，除了早期的插刀式之外，还有PK卡口、L39螺口和M42螺口。 Helios 44镜头均采用双高斯结构，使得该镜头可以轻松提供F2的大光圈，同时能够自动校正很多像差。但是由于早期双高斯结构设计上的问题，光圈全开时像场边缘部位的球形畸变校正不彻底，导致焦外光斑被压缩成椭圆形状，越靠近边缘变形越厉害，当焦外是明亮的杂乱光斑时能够形成所谓“漩涡散景”，即大家通常所说的漩焦。 Helios 44镜头版本繁多，如 Helios-44、Helios-44-2、Helios-44-7、Helios-44M、Helios-44M-4、以及后续的Helios-44M-5、Helios-44M-6和Helios-44M-7等。最早因为Helios-44-2有八片光圈，故有“八羽怪”的别称 Helios-44-2有两个用于控制光圈的光圈环，一个是无级调整光圈大小的光圈环，另一个环带有刻度，用于锁定最小光圈，以便在最大光圈下取景完毕后能迅速回到想用的光圈进行拍摄。 从Helios-44M开始，加入了自动顶针，光圈环减少为一个并带有刻度。镜头前面是对焦环，后面是光圈环，使用起来的感觉和如今的手动头一样。从Helios-44M-4开始，开始采用多层镀膜技术，分辨率大为提高</p></blockquote><hr><p>[dogevideo muted=1 loop=1]837c3f2ed15b365f[/dogevideo]</p><p>f2 视频虚化效果</p><hr><p>[caption id=”” align=”aligncenter” width=”400”]<a href="https://image.krunk.cn/images/2020/05/08/IMG_0008.md.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/05/08/IMG_0008.md.jpg" alt="IMG_0008.md.jpg">      </a> Canon 50mm f1.8 STM[/caption] &nbsp; [caption id=”” align=”aligncenter” width=”400”]<a href="https://image.krunk.cn/images/2020/05/08/IMG_0010.md.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/05/08/IMG_0010.md.jpg" alt="IMG_0010.md.jpg">      </a> 44M-4[/caption] [caption id=”” align=”aligncenter” width=”400”]<a href="https://i.loli.net/2020/05/08/I2APli6fuxDFqLa.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://i.loli.net/2020/05/08/I2APli6fuxDFqLa.png">      </a> 左：44M-4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;右：Canon 50mm f1.8 STM[/caption] <a href="https://i.loli.net/2020/05/09/j2nG6PfvbEKoZzC.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://i.loli.net/2020/05/09/j2nG6PfvbEKoZzC.jpg">      </a></p><hr>        <h1 id="样片">          <a href="#样片" class="heading-link"><i class="fas fa-link"></i></a><a href="#样片" class="headerlink" title="样片"></a>样片</h1>      <p>[caption id=”” align=”aligncenter” width=”428”]<a href="https://history.whrblog.online/2019/04/07/image-bed-1/20200503165489.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/20200503165489.jpg">      </a> Canon Kiss X3 f2 1/50 ISO 800[/caption] [caption id=”” align=”aligncenter” width=”428”]<a href="https://i.loli.net/2020/05/11/mlf62tdD3BULeIM.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://i.loli.net/2020/05/11/mlf62tdD3BULeIM.jpg">      </a> Canon Kiss X3 f2 0.5‘ ISO 100[/caption] <a href="https://history.whrblog.online/2019/04/07/image-bed-1/DSCF1296.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/DSCF1296.JPG" alt="FUJIFILM XT3 f4">      </a> <a href="https://history.whrblog.online/2019/04/07/image-bed-1/DSCF1291.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/DSCF1291.JPG" alt="FUJIFILM XT3 f8">      </a> [dogevideo loop=1]abb6a1f3fefd5245[/dogevideo]</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://history.whrblog.online/2019/04/07/image-bed-1/20200507134351.jpg&quot;&gt;
        &lt;img class=&quot;lazyload lazyload-gif&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://history.whrblog.online/2019/04/07/image-bed-1/20200507134351.jpg&quot;&gt;
      &lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>4.7 玄风飞行基地</title>
    <link href="https://whrblog.online/2020/04/08/4-7/"/>
    <id>https://whrblog.online/2020/04/08/4-7/</id>
    <published>2020-04-08T04:04:40.000Z</published>
    <updated>2021-08-21T02:42:53.853Z</updated>
    
    <content type="html"><![CDATA[<p>        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/04/13/IMG_0155.md.jpg">      </p><span id="more"></span><p>[dogevideo]1e4b3e5ea84bd042[/dogevideo]</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;
        &lt;img class=&quot;lazyload lazyload-gif&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://image.krunk.cn/images/2020/04/13/IMG_0155.md.jpg&quot;&gt;
      &lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="Date" scheme="https://whrblog.online/tags/Date/"/>
    
    <category term="R.C" scheme="https://whrblog.online/tags/R-C/"/>
    
  </entry>
  
  <entry>
    <title>极致细节的无损视频</title>
    <link href="https://whrblog.online/2020/03/25/lossless_video_on_500D_with_magiclantern/"/>
    <id>https://whrblog.online/2020/03/25/lossless_video_on_500D_with_magiclantern/</id>
    <published>2020-03-25T01:29:20.000Z</published>
    <updated>2021-08-26T16:53:36.959Z</updated>
    
    <content type="html"><![CDATA[<div id="player"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player = new DogePlayer({    container: document.getElementById('player'),    userId: 1131,    vcode: 'c7f76db19e56338b'});</script><span id="more"></span><p>说出来可能不信，器材是09年的佳能500D加上外挂<span class="exturl"><a class="exturl__link" href="http://magiclantern.fm/">Magic lantern</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>固件</p>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;player&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://player.dogecloud.com/js/loader&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var player = new DogePlayer({
    container: document.getElementById(&#39;player&#39;),
    userId: 1131,
    vcode: &#39;c7f76db19e56338b&#39;
});
&lt;/script&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="IT" scheme="https://whrblog.online/tags/IT/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>在单片机上运行Linux（转载）</title>
    <link href="https://whrblog.online/2020/03/11/%E5%9C%A8avr%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8A%E8%BF%90%E8%A1%8Clinux/"/>
    <id>https://whrblog.online/2020/03/11/%E5%9C%A8avr%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8A%E8%BF%90%E8%A1%8Clinux/</id>
    <published>2020-03-11T07:44:39.000Z</published>
    <updated>2021-08-21T02:42:53.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍">          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1>      <p>在Linux论坛中，常见的问题是询问Linux的最低规格是多少。常见的答案是，它需要32位体系结构，一个MMU和至少一兆字节的RAM以适合内核。该项目旨在（并成功）的粉碎这些概念。您在右侧看到的开发板基于ATmega1284p。我也使用ATmega644a取得了同样的成功。该主板没有其他处理器，并且可以启动Linux 2.6.34。实际上，它甚至可以显示完整的Ubuntu堆栈，包括（如果有时间等的话）X和gnome。</p><span id="more"></span><p><a href="https://image.krunk.cn/images/2020/03/11/board1.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/03/11/board1.jpg" alt="board1.jpg">      </a></p>        <h1 id="内存">          <a href="#内存" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存" class="headerlink" title="内存"></a><strong>内存</strong></h1>      <p>完整的Linux安装需要兆字节或RAM和带有MMU的32位CPU。这个项目具有所有这些。首先让我们解决RAM。如您所见，板上有一个老式的30针SIMM内存模块。这些已用于基于80286的PC。它与ATmega接口，我编写了代码来访问它以及在规范内对其进行刷新（SDRAM需要不断刷新以避免丢失数据）。有多快？刷新中断每62ms发生一次，占用1.5ms，因此占用了不到3％的CPU。为了便于编程，一次访问一个字节访问RAM。这导致每秒大约300 KB的最大带宽。</p>        <h1 id="存储">          <a href="#存储" class="heading-link"><i class="fas fa-link"></i></a><a href="#存储" class="headerlink" title="存储"></a>存储</h1>      <p>随着对RAM要求的降低，我们有两个要处理。存储不是很难解决的问题。SD卡很容易与使用SPI对话，而我的项目做到了这一点。1GB SD卡可以正常工作，尽管512Mb对于该特定文件系统（Ubuntu Jaunty）而言已足够。ATmega确实有一个硬件SPI模块，但是由于某种原因，它并没有完全解决问题，因此我在接口上做一些改动。它仍然足够快-大约每秒200千字节。这也给项目增加了一个很好的感觉-可以在任何具有足够引脚的微控制器上完成-无需使用硬件模块。 <a href="https://image.krunk.cn/images/2020/03/11/board3.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/03/11/board3.jpg" alt="board3.jpg">      </a></p>        <h1 id="中央处理器">          <a href="#中央处理器" class="heading-link"><i class="fas fa-link"></i></a><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h1>      <p>剩下的就是讨厌的32位CPU和MMU要求。那么，AVR没有MMU，而是8位的。为了克服这一障碍，我编写了一个ARM仿真器。ARM是我最熟悉的体系结构，它非常简单，可以轻松编写一个仿真器。为什么要写一个而不是移植一个？好吧，移植别人的代码是没有意思的，再加上我看到的所有仿真器都不是以易于移植到8位设备的方式编写的。原因之一：AVR编译器坚持将ints设置为16位，这样简单的事情如“（1 &lt;&lt; 20）”会给您带来麻烦，并产生零。相反，您需要执行“（1UL &lt;&lt; 20）”。不用说拖曳其他人的未知代码库，寻找所有假定为int且可能会失败的地方将是一场灾难。另外，我希望有机会编写一个不错的模块化ARM仿真器。所以我做了。</p>        <h1 id="其它功能">          <a href="#其它功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h1>      <p>该板与现实世界的通信是通过串行端口进行的。目前，它连接到运行minicom的PC上的串行端口，但是可以替代地将键盘和字符LCD连接到板上，使其完全独立。板上也有两个LED。它们发出SD卡访问信号。一读，一写。板上也有一个按钮。按住一秒钟，它将在串行端口上吐出模拟CPU的当前有效速度。AVR的主频为24MHz（比其现有的20MHz略有超频）</p>        <h1 id="速度有多快？">          <a href="#速度有多快？" class="heading-link"><i class="fas fa-link"></i></a><a href="#速度有多快？" class="headerlink" title="速度有多快？"></a>速度有多快？</h1>      <p>uARM当然不是速度恶魔。引导到bash提示符（“ <code>init = / bin / bas</code>h”内核命令行）大约需要2个小时。然后再花4个小时来启动整个Ubuntu（“ exec init”，然后登录）。启动X需要更长的时间。有效的仿真CPU速度约为6.5KHz，与您期望的在8位微控制器上仿真32位CPU和MMU相当。<strong>奇怪的是</strong>，系统一旦启动，就可以使用了。您可以输入命令并在一分钟内得到答复。也就是说，实际上您<strong>可以</strong>使用它。例如，我今天用它来格式化SD卡。这绝对不是最快的方法，但我认为它可能是_最便宜_，<em>最慢_，_最容易组装的_，_最低的零件数量_和_最低端的</em>&nbsp;Linux PC。该板是用电线手工焊接的，甚至不需要印刷电路板。</p>        <h1 id="有关仿真器的详细信息">          <a href="#有关仿真器的详细信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#有关仿真器的详细信息" class="headerlink" title="有关仿真器的详细信息"></a>有关仿真器的详细信息</h1>      <p>该仿真器是非常模块化的，可以随意扩展以仿真其他SoC和硬件配置。仿真的CPU是ARMv5TE。前一阵子，我开始支持ARMv6，但是由于不需要，它从未完成（如代码所示）。仿真的SoC是PXA255。由于设计的模块化，您可以替换SoC.c并使用相同的ARMv5TE内核制造一个全新的SoC，或者替换该内核，或者随意替换外围设备。这是有目的的，因为我的意思是该代码也可以作为ARM SoC工作原理的合理清晰演示。CPU模拟器本身的代码不太干净，因为它是一个CPU模拟器。它是几年前写的超过6个月的空闲时间，然后放在一边。最近专门针对该项目复活了它。仿真器实现了一个i-cache来加快处理速度。AVR上<strong>有很多</strong>功能，与我的外部RAM不同，AVR可以以每秒5兆字节的速度访问内部存储器。我从来没有实现过d-cache，但是它在待办事项列表中。对块设备的访问未模拟为SD设备。事实证明这太慢了。相反，我编写了一个半虚拟化的磁盘设备（pvdisk，请参阅pvDisk.tar.bz2，GPL许可证），该设备使用无效的操作码来调用仿真器并访问磁盘。我映像中的ramdisk加载了该pvdisk，然后将chroots加载到/ dev / pvd1。ramdisk作为“ rd.img”包含在内。我使用的“机器类型”是PalmTE2。为什么？因为我对硬件非常熟悉，所以它是我看到的第一个pxa255机器类型。</p>        <h1 id="超级终端？">          <a href="#超级终端？" class="heading-link"><i class="fas fa-link"></i></a><a href="#超级终端？" class="headerlink" title="超级终端？"></a>超级终端？</h1>      <p>您可以使用特殊的操作码向仿真器请求一些服务。在手臂上是<code>0xF7BBBBBB</code>，在拇指上是0xBBBB。选择它们是因为它们在ARM保证未定义的范围内。在R12中传递超级调用号，在R0..R3中传递参数，将返回值放置在R0中。来电：</p><ul><li>  0 =停止仿真</li><li>  1 =打印十进制数</li><li>  2 =打印字符</li><li>  3 =获取滑枕尺寸</li><li>4 =块设备操作（R0 =操作R1 =扇区编号）。请注意，它们不写仿真RAM，而是填充仿真器内部缓冲区，仿真来宾使用另一个超级调用（每次一个字）访问该缓冲区。我本来打算实现DMA，但从未尝试过。操作：<ul><li>  0 = getInfo（如果扇区num为零，则返回num个扇区；如果扇区num为1，则返回以字节为单位的扇区大小）</li><li>  1 =扇区读取</li><li>  2 =扇区写入</li></ul></li><li>  5 =块设备缓冲区访问（R0 =值输入/值输出，R1 =字号，如果写则R2 = 1，否则为0）</li></ul>        <h1 id="支持Thumb？">          <a href="#支持Thumb？" class="heading-link"><i class="fas fa-link"></i></a><a href="#支持Thumb？" class="headerlink" title="支持Thumb？"></a>支持Thumb？</h1>      <p>完全支持Thumb。不过，我作弊了一点，将每个thumb指令解码为等效的ARM指令，然后使用arm模拟器功能执行该指令。它没有其他方法快，但是它很简单并且代码很小。可以使用256KB的查询表，但是我觉得256KB对于微控制器的闪存来说太大了。有些thumb指令不能转换为ARM，而是可以正确处理。</p>        <h1 id="自己建立">          <a href="#自己建立" class="heading-link"><i class="fas fa-link"></i></a><a href="#自己建立" class="headerlink" title="自己建立"></a>自己建立</h1>      <p>出于非商业目的，您绝对可以这样做。接线如下。RAM DQ0..DQ7-&gt; AVR C0..C7。RAM A0..A7-&gt; AVR A0..A7。RAM A8..A11-&gt; AVR B0..B3。RAM nRAS nCAS nWE-&gt; AVR D7 B4 B5。SD DI SCK DO-&gt; AVR B6 B7 D6。LED读写-&gt; AVR D2 D3（LED的另一脚接地）。按钮-&gt; AVR D4（另一条腿接地）。内存可以是任何30针16MB SIMM，并且可以每64ms进行4K周期的CAS-RAS刷新之前的CAS。我所用的（OWC）可以在线购买，价格为几美元。原理图如图所示。点击查看大图 <a href="https://image.krunk.cn/images/2020/03/11/uARM_big.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/03/11/uARM_big.png" alt="uARM_big.png">      </a> &nbsp;</p>        <h1 id="源代码？">          <a href="#源代码？" class="heading-link"><i class="fas fa-link"></i></a><a href="#源代码？" class="headerlink" title="源代码？"></a>源代码？</h1>      <p>有点混乱，但确实有效。趁热获取：<span class="exturl"><a class="exturl__link" href="http://dmitry.gr/images/uARM.zip">LINK</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。许可证对于非商业用途，只要您将许可证文件与源保持在一起并发布所有更改，如果用于商业用途，请与我联系，我们会达成协议。要构建仿真器以在PC上进行尝试，请键入“ make”</p><ul><li>  使用“ ./uARM DISK_IMAGE”。要构建优化的PC版本，</li><li>  使用“ make BUILD = opt”。为AVR构建，</li><li>  使用“ make BUILD = avr”。它目前针对ATmega1284p。</li><li>  要以ATmega644为目标，除了更改makefile之外，还要减少icache.h中的数字，以使icache足够小以适合644中的内部RAM。归档文件中还包括1284p的最终十六进制文件。</li></ul>        <h2 id="启动过程">          <a href="#启动过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2>      <p>为了节省AVR中的代码空间，仿真器中几乎没有启动代码。实际上，“ ROM”总共有50个字节：8个字节可切换到拇指模式，还有一些拇指代码可读取SD卡的第一个扇区并以拇指模式跳至该扇区（请参见EmbeddedBoot.c）。SD卡的MBR具有另一个引导加载程序（以拇指模式编写）。这一节着眼于MBR，找到了活动分区并将其内容加载到RAM的末尾。然后，它跳转到目标ram地址+ 512（请参阅mbrBoot.c）。这里有第三大引导加载程序ELLE（请参阅ELLE.c）。这将重定位虚拟磁盘，设置ATAGS，然后调用内核。提供所有二进制文件和源文件，以便您可以随意制作自己的图像。引导过程应让人联想到PC引导。:)包含的mkbootimg。sh工具可用于制作启动分区的工作映像。完整的工作磁盘映像？<span class="exturl"><a class="exturl__link" href="https://mega.nz/#!0wQSSSbT!VHOZ3XhWDeyxMb8yvuCBw-GfJkpYNnnjIgl9SKWLi6Q">链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。 &nbsp;</p><p><span class="exturl"><a class="exturl__link" href="http://dmitry.gr/?r=05.Projects&amp;proj=07.%20Linux%20on%208bit">via</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;
          &lt;a href=&quot;#介绍&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;
      &lt;p&gt;在Linux论坛中，常见的问题是询问Linux的最低规格是多少。常见的答案是，它需要32位体系结构，一个MMU和至少一兆字节的RAM以适合内核。该项目旨在（并成功）的粉碎这些概念。您在右侧看到的开发板基于ATmega1284p。我也使用ATmega644a取得了同样的成功。该主板没有其他处理器，并且可以启动Linux 2.6.34。实际上，它甚至可以显示完整的Ubuntu堆栈，包括（如果有时间等的话）X和gnome。&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="IT" scheme="https://whrblog.online/tags/IT/"/>
    
    <category term="Linux" scheme="https://whrblog.online/tags/Linux/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>用Arduino给你弹一首天空之城叭</title>
    <link href="https://whrblog.online/2020/02/24/%E7%94%A8arduino%E7%BB%99%E4%BD%A0%E5%BC%B9%E4%B8%80%E9%A6%96%E5%A4%A9%E7%A9%BA%E4%B9%8B%E5%9F%8E%E5%8F%AD/"/>
    <id>https://whrblog.online/2020/02/24/%E7%94%A8arduino%E7%BB%99%E4%BD%A0%E5%BC%B9%E4%B8%80%E9%A6%96%E5%A4%A9%E7%A9%BA%E4%B9%8B%E5%9F%8E%E5%8F%AD/</id>
    <published>2020-02-24T07:35:15.000Z</published>
    <updated>2021-08-21T02:42:53.825Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp; <a href="https://image.krunk.cn/images/2020/02/24/Untitled-Sketch_bb.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/02/24/Untitled-Sketch_bb.md.jpg" alt="Untitled-Sketch_bb.jpg">      </a></p><span id="more"></span><p>#define NOTE_D0 -1<br>#define NOTE_D1 294<br>#define NOTE_D2 330<br>#define NOTE_D3 350<br>#define NOTE_D4 393<br>#define NOTE_D5 441<br>#define NOTE_D6 495<br>#define NOTE_D7 556 </p><p>#define NOTE_DL1 147<br>#define NOTE_DL2 165<br>#define NOTE_DL3 175<br>#define NOTE_DL4 196<br>#define NOTE_DL5 221<br>#define NOTE_DL6 248<br>#define NOTE_DL7 278 </p><p>#define NOTE_DH1 589<br>#define NOTE_DH2 661<br>#define NOTE_DH3 700<br>#define NOTE_DH4 786<br>#define NOTE_DH5 882<br>#define NOTE_DH6 990<br>#define NOTE_DH7 112  </p><p>#define WHOLE 1<br>#define HALF 0.5<br>#define QUARTER 0.25<br>#define EIGHTH 0.25<br>#define SIXTEENTH 0.625  </p><p>int tune[] =<br>{<br> NOTE_D0,NOTE_D0,NOTE_D0,NOTE_D6,NOTE_D7,NOTE_DH1,NOTE_D7,NOTE_DH1,NOTE_DH3,NOTE_D7,NOTE_D7,NOTE_D7,NOTE_D3,NOTE_D3,<br> NOTE_D6,NOTE_D5,NOTE_D6,NOTE_DH1,NOTE_D5,NOTE_D5,NOTE_D5,NOTE_D3,NOTE_D4,NOTE_D3,NOTE_D4,NOTE_DH1,<br> NOTE_D3,NOTE_D3,NOTE_D0,NOTE_DH1,NOTE_DH1,NOTE_DH1,NOTE_D7,NOTE_D4,NOTE_D4,NOTE_D7,NOTE_D7,NOTE_D7,NOTE_D0,NOTE_D6,NOTE_D7,<br> NOTE_DH1,NOTE_D7,NOTE_DH1,NOTE_DH3,NOTE_D7,NOTE_D7,NOTE_D7,NOTE_D3,NOTE_D3,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_DH1,<br> NOTE_D5,NOTE_D5,NOTE_D5,NOTE_D2,NOTE_D3,NOTE_D4,NOTE_DH1,NOTE_D7,NOTE_D7,NOTE_DH1,NOTE_DH1,NOTE_DH2,NOTE_DH2,NOTE_DH3,NOTE_DH1,NOTE_DH1,NOTE_DH1,<br> NOTE_DH1,NOTE_D7,NOTE_D6,NOTE_D6,NOTE_D7,NOTE_D5,NOTE_D6,NOTE_D6,NOTE_D6,NOTE_DH1,NOTE_DH2,NOTE_DH3,NOTE_DH2,NOTE_DH3,NOTE_DH5,<br> NOTE_DH2,NOTE_DH2,NOTE_DH2,NOTE_D5,NOTE_D5,NOTE_DH1,NOTE_D7,NOTE_DH1,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH3,<br> NOTE_D6,NOTE_D7,NOTE_DH1,NOTE_D7,NOTE_DH2,NOTE_DH2,NOTE_DH1,NOTE_D5,NOTE_D5,NOTE_D5,NOTE_DH4,NOTE_DH3,NOTE_DH2,NOTE_DH1,<br> NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH6,NOTE_DH6,NOTE_DH5,NOTE_DH5,NOTE_DH3,NOTE_DH2,NOTE_DH1,NOTE_DH1,NOTE_D0,NOTE_DH1,<br> NOTE_DH2,NOTE_DH1,NOTE_DH2,NOTE_DH2,NOTE_DH5,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH6,NOTE_DH6,NOTE_DH5,NOTE_DH5,<br> NOTE_DH3,NOTE_DH2,NOTE_DH1,NOTE_DH1,NOTE_D0,NOTE_DH1,NOTE_DH2,NOTE_DH1,NOTE_DH2,NOTE_DH2,NOTE_D7,NOTE_D6,NOTE_D6,NOTE_D6,NOTE_D6,NOTE_D7<br>};</p><p>float duration[]= </p><p>{<br>  1,1,1,0.5,0.5,     1+0.5,0.5,1,1,     1,1,1,0.5,0.5,<br>  1+0.5,0.5,1,1,     1,1,1,1,          1+0.5,0.5,1,1,<br>  1,1,0.5,0.5,0.5,0.5,    1+0.5,0.5,1,1,     1,1,1,0.5,0.5,<br>  1+0.5,0.5,1,1,    1,1,1,0.5,0.5,     1+0.5,0.5,1,1,<br>  1,1,1,0.5,0.5,    1,0.5,0.25,0.25,0.25,0.5,    0.5,0.5,0.5,0.25,0.5,1,<br>  0.5,0.5,0.5,0.5,1,1,    1,1,1,0.5,0.5,    1+0.5,0.5,1,1,<br>  1,1,1,0.5,0.5,    1.5,0.5,1,1,    1,1,1,1,<br>  0.5,0.5,1,1,0.5,0.5,    1.5,0.25,0.5,1,    1,1,1,1,<br>  1,1,1,1,    1,1,1,1,    0.5,0.5,1,1,0.5,0.5,<br>  1,0.5,0.5,1,1,    1,1,1,1,    1,1,1,1,<br>  0.5,0.5,1,1,0.5,0.5,    1,0.5,0.25,0.5,1,    1,1,1,0.5,0.5<br>};</p><p>int length;</p><p>int tonePin=8; </p><p>void setup() </p><p>{<br>  pinMode(tonePin,OUTPUT);</p><p>  length = sizeof(tune)/sizeof(tune[0]);</p><p>} </p><p>void loop() </p><p>{  </p><p>  for(int x=0;x&lt;length;x++)<br>  {<br>    tone(tonePin,tune[x]);</p><p> delay(400*duration[x]);</p><p>noTone(tonePin);</p><p>  }<br>  delay(5000);<br>}</p><p>&nbsp;</p><p><span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce\_SELRES\_start">﻿</span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;nbsp; &lt;a href=&quot;https://image.krunk.cn/images/2020/02/24/Untitled-Sketch_bb.jpg&quot;&gt;
        &lt;img class=&quot;lazyload lazyload-gif&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://image.krunk.cn/images/2020/02/24/Untitled-Sketch_bb.md.jpg&quot; alt=&quot;Untitled-Sketch_bb.jpg&quot;&gt;
      &lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="IT" scheme="https://whrblog.online/tags/IT/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Raspi/Orapi" scheme="https://whrblog.online/tags/Raspi-Orapi/"/>
    
  </entry>
  
  <entry>
    <title>2020.2.17 孤独者的盛宴</title>
    <link href="https://whrblog.online/2020/02/18/2020-2-17-%E5%AD%A4%E7%8B%AC%E8%80%85%E7%9A%84%E7%9B%9B%E5%AE%B4/"/>
    <id>https://whrblog.online/2020/02/18/2020-2-17-%E5%AD%A4%E7%8B%AC%E8%80%85%E7%9A%84%E7%9B%9B%E5%AE%B4/</id>
    <published>2020-02-18T06:36:39.000Z</published>
    <updated>2021-08-21T02:42:53.817Z</updated>
    
    <content type="html"><![CDATA[<p>深蓝色的天空是那样的迷人,天空满天星斗,像一粒粒珍珠,似一把把碎金,撒落在碧玉盘上。此刻是那么的宁静、安详。星空之所以美丽,是因为它璀璨在黑夜里,也许,人的一生,必须如星空般孤单,才会如此灿烂吧。我们曾经也错过许多美好的东西,何不抬头仰望偌大的星空,感受一下那种心痛,也许也许也是一种幸福。</p><span id="more"></span><p><a href="https://history.whrblog.online/2019/04/07/image-bed-1/img_002-02-2.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/img_002-02-2.jpg">      </a></p><p>——孤独星球</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;深蓝色的天空是那样的迷人,天空满天星斗,像一粒粒珍珠,似一把把碎金,撒落在碧玉盘上。此刻是那么的宁静、安详。星空之所以美丽,是因为它璀璨在黑夜里,也许,人的一生,必须如星空般孤单,才会如此灿烂吧。我们曾经也错过许多美好的东西,何不抬头仰望偌大的星空,感受一下那种心痛,也许也许也是一种幸福。&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="Date" scheme="https://whrblog.online/tags/Date/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266+Blynk做一个根开机棒</title>
    <link href="https://whrblog.online/2020/01/24/esp8266blynk%E5%81%9A%E4%B8%80%E4%B8%AA%E6%A0%B9%E5%BC%80%E6%9C%BA%E6%A3%92/"/>
    <id>https://whrblog.online/2020/01/24/esp8266blynk%E5%81%9A%E4%B8%80%E4%B8%AA%E6%A0%B9%E5%BC%80%E6%9C%BA%E6%A3%92/</id>
    <published>2020-01-24T06:32:36.000Z</published>
    <updated>2021-08-21T02:42:53.797Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://image.krunk.cn/images/2020/01/24/IMG_20200124_131834-01.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/01/24/IMG_20200124_131834-01.md.jpg" alt="IMG_20200124_131834-01.jpg">      </a></p><span id="more"></span>        <h1 id="介绍">          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1>      <p>这个应用程序是为启动服务器编写的，只支持启动一个设备。它需要在源码中配置WOL服务器以及配置服务器的静态IP。</p>        <h1 id="Devices">          <a href="#Devices" class="heading-link"><i class="fas fa-link"></i></a><a href="#Devices" class="headerlink" title="Devices"></a>Devices</h1>      <ol><li> ESP8266</li><li> Arduino IDE（所需库文件<span class="exturl"><a class="exturl__link" href="https://github.com/dancol90/ESP8266Ping">ESP8266Ping</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>,<span class="exturl"><a class="exturl__link" href="https://github.com/esp8266/Arduino">ESP8266 Plug-in</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>,<span class="exturl"><a class="exturl__link" href="https://github.com/blynkkk/blynk-library/releases/download/">Blynk</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）</li><li> Blynk</li></ol>        <h1 id="需要更改的代码">          <a href="#需要更改的代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#需要更改的代码" class="headerlink" title="需要更改的代码"></a>需要更改的代码</h1>      <p>//WiFi config<br>const char auth[] = “Blynk_AuthToken”;  //Blynk Auth Token (You get after the project was created in Blynk)<br>const char ssid[] = “WiFi_SSID”;<br>const char pass[] = “WiFi_Password”;</p><p>const IPAddress ip(192, 168, 0, 123); //Static IP for your WOL Server<br>const IPAddress gateway(192, 168, 0, 1);<br>const IPAddress bcastAddr(192, 168, 0, 255);<br>const IPAddress subnet(255, 255, 255, 0);<br>const IPAddress dns(1, 1, 1, 1);  //IP address of your preferred DNS server</p><p>//WOL device config<br>const IPAddress device_ip(192, 168, 0, 234); //Static IP address of device to be turned on (used for ping)<br>byte macAddr[6] = {0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};  //Mac address of device to be turned on (important for the magic packet)</p><p>//Alert config<br>const char email[] = “<span class="exturl"><a class="exturl__link" href="mailto:example@example.com">example@example.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>“;<br>const char device_name[] = “NAS”;<br>const uint16_t boot_time = 45;//number for countdown (It does not represent seconds, but it’s close, read the known issues!)</p><p><a href="https://image.krunk.cn/images/2020/01/24/-1.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/01/24/-1.jpg" alt="-1.jpg">      </a></p>        <h1 id="Code">          <a href="#Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code" class="headerlink" title="Code"></a>Code</h1>      <p>&nbsp;</p><p>//#define DEBUG<br>#ifdef DEBUG<br>#define BLYNK_PRINT Serial<br>//#define BLYNK_DEBUG<br>//#define ENABLE_DEBUG_PING<br>#endif</p><p>#define BLYNK_NO_BUILTIN//disable built-in analog and digital operations.<br>//#define BLYNK_NO_INFO//disable providing info about device to the server. (saving time)</p><p>#include &lt;ESP8266WiFi.h&gt;<br>#include &lt;BlynkSimpleEsp8266.h&gt;<br>#include &lt;WiFiUdp.h&gt;<br>#include &lt;ESP8266Ping.h&gt; </p><p>//blynk colors<br>#define BLYNK_GREEN”#23C48E”<br>#define BLYNK_BLUE”#04C0F8”<br>#define BLYNK_YELLOW”#ED9D00”<br>#define BLYNK_RED”#D3435C”<br>#define BLYNK_DARK_BLUE”#5F7CD8”</p><p>//WiFi config<br>const char auth[] = “Blynk_AuthToken”;<br>const char ssid[] = “WiFi_SSID”;<br>const char pass[] = “WiFi_Password”;</p><p>const IPAddress ip(192, 168, 0, 123);<br>const IPAddress gateway(192, 168, 0, 1);<br>const IPAddress bcastAddr(192, 168, 0, 255);<br>const IPAddress subnet(255, 255, 255, 0);<br>const IPAddress dns(1, 1, 1, 1);</p><p>//WOL device config<br>const IPAddress device_ip(192, 168, 0, 234);<br>byte macAddr[6] = {0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};</p><p>//Alert config<br>const char email[] = “<span class="exturl"><a class="exturl__link" href="mailto:example@example.com">example@example.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>“;<br>const char device_name[] = “NAS”;<br>const uint16_t boot_time = 45;//number for countdown (It does not represent seconds, read the known issues!)</p><p>//WOL<br>#define MAGIC_PACKET_LENGTH 102<br>#define PORT_WAKEONLAN 9<br>byte magicPacket[MAGIC_PACKET_LENGTH];<br>unsigned int localPort = 9;</p><p>WiFiUDP udp;</p><p>//pins<br>#define STATE_PINV0<br>#define BUTTON_PINV1<br>#define PING_TIME_PINV2<br>#define RSSI_PINV3</p><p>//state<br>struct WOLServerState {<br>bool IsOnline;<br>uint16_t boot_time;<br>bool boot_error;<br>uint16_t ping;<br>uint32_t previousMillis;<br>uint32_t interval;<br>};<br>WOLServerState currentState = { false, 0, false, 0, 0, 5000UL };</p><p>void setup() {<br>#ifdef DEBUG<br>Serial.begin(115200);<br>#endif</p><p>connectWiFi();<br>connectBlynk();</p><p>//if (Blynk.connected()) {<br>if (udp.begin(localPort) == 1) {<br>BLYNK_LOG(“udp begin OK”);<br>buildMagicPacket();<br>} else {<br>delay(500);<br>ESP.restart();<br>}<br>//}<br>}</p><p>void connectWiFi() {<br>WiFi.mode(WIFI_STA);<br>WiFi.hostname(“WOL server”);<br>WiFi.config(ip, dns, gateway, subnet);<br>WiFi.begin(ssid, pass);</p><p>int count = 0;<br>while (WiFi.status() != WL_CONNECTED) {<br>delay(250);<br>digitalWrite(LED_BUILTIN, HIGH);<br>delay(250);<br>digitalWrite(LED_BUILTIN, LOW);</p><p>count++;<br>if (count &gt; 20) {<br>delay(500);<br>ESP.restart();<br>}<br>}</p><p>//BLYNK_LOG(“WiFi connected, IP: %s”, WiFi.localIP().toString());<br>}</p><p>void connectBlynk() {<br>Blynk.config(auth);<br>Blynk.disconnect();</p><p>int count = 0;<br>while (Blynk.connect(10000) == false) {<br>delay(250);<br>digitalWrite(LED_BUILTIN, HIGH);<br>delay(250);<br>digitalWrite(LED_BUILTIN, LOW);</p><p>count++;<br>if (count &gt; 20) {<br>delay(500);<br>ESP.restart();<br>}<br>}</p><p>BLYNK_LOG(“Blynk connected”);<br>}</p><p>void loop() {<br>// Reconnect WiFi<br>if (WiFi.status() != WL_CONNECTED) {<br>connectWiFi();<br>return;<br>}</p><p>// Reconnect to Blynk Cloud<br>if (!Blynk.connected()) {<br>connectBlynk();<br>return;<br>}</p><p>uint32_t currentMillis = millis();<br>if (currentMillis - currentState.previousMillis &gt;= currentState.interval) {<br>currentState.previousMillis = currentMillis;</p><p>if (currentState.boot_time == 0) {<br>currentState.interval = 5000UL;<br>} else {<br>currentState.boot_time–;<br>if (currentState.boot_time == 0) {<br>currentState.boot_error = true;<br>Blynk.email(email, “{DEVICE_NAME} : Alert”, String(device_name) + “ could not be turned on!”);<br>}<br>}</p><p>if (Ping.ping(device_ip, 1)) {<br>currentState.IsOnline = true;<br>currentState.boot_error = false;<br>currentState.boot_time = 0;<br>currentState.ping = Ping.averageTime();<br>} else {<br>currentState.IsOnline = false;<br>currentState.ping = 0;<br>}<br>}</p><p>Blynk.run();<br>}</p><p>// Generate magic packet<br>void buildMagicPacket() {<br>memset(magicPacket, 0xFF, 6);<br>for (int i = 0; i &lt; 16; i++) { int ofs = i * sizeof(macAddr) + 6; memcpy(&amp;magicPacket[ofs], macAddr, sizeof(macAddr)); } } //BLYNK_CONNECTED() { // Blynk.syncVirtual(BUTTON_PIN); //} // BOOT PC button handler of application BLYNK_WRITE(BUTTON_PIN) { if (!currentState.IsOnline &amp;&amp; currentState.boot_time == 0) { BLYNK_LOG(“AppButtonWakeOnLan: value=%d”, param.asInt()); udp.beginPacket(bcastAddr, PORT_WAKEONLAN); udp.write(magicPacket, MAGIC_PACKET_LENGTH); udp.endPacket(); currentState.boot_time = boot_time; currentState.interval = 1000UL; } } BLYNK_READ(STATE_PIN) { Blynk.virtualWrite(RSSI_PIN, WiFi.RSSI()); Blynk.virtualWrite(PING_TIME_PIN, currentState.ping); if (currentState.IsOnline) { Blynk.setProperty(STATE_PIN, “color”, BLYNK_GREEN); Blynk.virtualWrite(STATE_PIN, String(device_name) + “ is Online”); Blynk.setProperty(BUTTON_PIN, “color”, BLYNK_DARK_BLUE); Blynk.setProperty(BUTTON_PIN, “offLabel”, String(device_name) + “ running…”); Blynk.setProperty(BUTTON_PIN, “onLabel”, String(device_name) + “ running…”); } else if (!currentState.IsOnline &amp;&amp; currentState.boot_time &gt; 0) {<br>Blynk.setProperty(STATE_PIN, “color”, BLYNK_BLUE);<br>Blynk.virtualWrite(STATE_PIN, “Waiting for ping…”);</p><p>Blynk.setProperty(BUTTON_PIN, “color”, BLYNK_YELLOW);<br>Blynk.setProperty(BUTTON_PIN, “offLabel”, currentState.boot_time);<br>Blynk.setProperty(BUTTON_PIN, “onLabel”, “Waiting for ping…”);<br>} else if (!currentState.IsOnline &amp;&amp; currentState.boot_time == 0 &amp;&amp; currentState.boot_error) {<br>Blynk.setProperty(STATE_PIN, “color”, BLYNK_RED);<br>Blynk.virtualWrite(STATE_PIN, “Oops! Something happened, Try It Again!”);</p><p>Blynk.setProperty(BUTTON_PIN, “color”, BLYNK_YELLOW);<br>Blynk.setProperty(BUTTON_PIN, “offLabel”, “Try It Again”);<br>Blynk.setProperty(BUTTON_PIN, “onLabel”, “Magic Packet has been sent”);<br>} else {<br>Blynk.setProperty(STATE_PIN, “color”, BLYNK_RED);<br>Blynk.virtualWrite(STATE_PIN, String(device_name) + “ is Offline”);</p><p>Blynk.setProperty(BUTTON_PIN, “color”, BLYNK_BLUE);<br>Blynk.setProperty(BUTTON_PIN, “offLabel”, “Turn On”);<br>Blynk.setProperty(BUTTON_PIN, “onLabel”, “Magic Packet has been sent”);<br>}<br>}</p>        <h1 id="Blynk">          <a href="#Blynk" class="heading-link"><i class="fas fa-link"></i></a><a href="#Blynk" class="headerlink" title="Blynk"></a>Blynk</h1>      <p>        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/01/24/TIM20200124142924.md.jpg" alt="TIM20200124142924.jpg">               <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://camo.githubusercontent.com/51545377e6fb634a2db39a6f43c8f83f7cafd31c/68747470733a2f2f7777772e656d7369742e736b2f536861726564436f6e74656e742f4769744875622f455350383236365f426c796e6b5f574f4c5f5365727665722f325f7468756d626e61696c2e706e67">       &nbsp;</p><p><span class="exturl"><a class="exturl__link" href="https://github.com/Pnoxi/ESP8266_Blynk_WOL_Server">via</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://image.krunk.cn/images/2020/01/24/IMG_20200124_131834-01.jpg&quot;&gt;
        &lt;img class=&quot;lazyload lazyload-gif&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://image.krunk.cn/images/2020/01/24/IMG_20200124_131834-01.md.jpg&quot; alt=&quot;IMG_20200124_131834-01.jpg&quot;&gt;
      &lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="IT" scheme="https://whrblog.online/tags/IT/"/>
    
    <category term="Linux" scheme="https://whrblog.online/tags/Linux/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Raspi/Orapi" scheme="https://whrblog.online/tags/Raspi-Orapi/"/>
    
  </entry>
  
  <entry>
    <title>3A练习</title>
    <link href="https://whrblog.online/2020/01/22/3a%E7%BB%83%E4%B9%A0/"/>
    <id>https://whrblog.online/2020/01/22/3a%E7%BB%83%E4%B9%A0/</id>
    <published>2020-01-22T05:57:56.000Z</published>
    <updated>2021-08-21T02:42:53.789Z</updated>
    
    <content type="html"><![CDATA[<p><span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce\_SELRES\_start">﻿</span><span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce\_SELRES\_start">﻿</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;span data-mce-type=&quot;bookmark&quot; style=&quot;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&quot; class=&quot;mce\_SELRES\_start&quot;&gt;﻿&lt;</summary>
      
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="R.C" scheme="https://whrblog.online/tags/R-C/"/>
    
  </entry>
  
  <entry>
    <title>好照片？</title>
    <link href="https://whrblog.online/2019/11/03/%E5%A5%BD%E7%85%A7%E7%89%87%EF%BC%9F/"/>
    <id>https://whrblog.online/2019/11/03/%E5%A5%BD%E7%85%A7%E7%89%87%EF%BC%9F/</id>
    <published>2019-11-03T12:42:41.000Z</published>
    <updated>2021-08-21T02:42:53.761Z</updated>
    
    <content type="html"><![CDATA[<p>“什么算是一张好照片？” “要么去欣赏艺术，要么去创造艺术.但是不要去评价艺术。”</p><span id="more"></span><p>对于一张优秀的摄影作品，或者说是艺术作品，来说，什么才是最重要的？可能有的人会说是光，没错，光构成了影像的基础，没有光就不会有照片；可能有的人会说是构图，也没错，构图是一张照片的美学基础，只有构图合理的照片才能够让观看者更加容易接受画面中的内容，一张有着完美构图的照片能够在第一时间顺着拍摄者的构图原则将注意力集中到画面的主体身上。这些都没错，但却并不是唯一的标准，对于一张优秀的作品来说，重要的不仅仅于此。 <a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0335.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0335.jpg">      </a> 正如一万个人眼中有一万个哈姆雷特一般。摄影，亦或者说是艺术创作，不仅仅是用来记录当下，也是表现摄影者或者是被摄影者心情的一种方式。 拍照的过程更像是一种妥协，对于摄影师来说永远都不能做到完美，拍照不能像画画那样，按照自己心中所想随意所欲的去调整自己的画面。拍照更多是面对环境本身拍摄者自己做出的改变，不管光线好不好，不管面前的元素能不能满足自己的构图需求，都需要在思想与现实中妥协完成一张照片，让它尽可能的达到自己心目中的理想的样子。 <a href="https://image.krunk.cn/images/2019/11/27/IMG_0256-8.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2019/11/27/IMG_0256-8.md.jpg" alt="IMG_0256-8.jpg">      </a></p><p>“小姐姐怎么拍？动作怎么摆”</p><p>“摆拍的小姐姐</p><p>是“你的”小姐姐</p><p>不摆拍</p><p>才是小姐姐”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;“什么算是一张好照片？” “要么去欣赏艺术，要么去创造艺术.但是不要去评价艺术。”&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="Date" scheme="https://whrblog.online/tags/Date/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="行者笔记" scheme="https://whrblog.online/tags/%E8%A1%8C%E8%80%85%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>行摄北疆</title>
    <link href="https://whrblog.online/2019/08/18/%E6%96%B0%E7%96%86/"/>
    <id>https://whrblog.online/2019/08/18/%E6%96%B0%E7%96%86/</id>
    <published>2019-08-17T23:46:27.000Z</published>
    <updated>2021-08-26T17:08:07.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019-8-17">          <a href="#2019-8-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#2019-8-17" class="headerlink" title="2019.8.17"></a>2019.8.17</h2>      <p>飞机承载着我对遥远北疆的热忱，在滑行道上缓缓升腾，在气流的颠簸里，我知道我此时已在离北疆越来越近的路途上了，那是个令人心驰神往的名词——北疆。</p><span id="more"></span><p>从平原到戈壁，从绿洲到雪山。造物主的鬼斧神工恍若中国水墨的手笔一般，那奇妙的白茫茫的雾爬进了我们的视野，模糊了云层的日光，并把那高空底下的层峦叠嶂幻化成了迷一般的幢幢怪影。 终于来到了向往已久的天山北麓，大自然用五彩斑斓的画笔给黄土高坡添置了别样的色彩，新疆——触手可及。 <a href="https://i.loli.net/2021/06/15/aPrDQYqlKEcwdF8.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://i.loli.net/2021/06/15/aPrDQYqlKEcwdF8.jpg">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0431.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0431.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0455.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0455.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0449.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0449.JPG">      </a> 雪山，雪岭无限延伸；雪峰，肃立威严。北国的冬雪尚未化尽，一座座山峦此起彼伏、银装素裹、延绵千里，那盘踞的身形恍若九天银河洒落人间阅尽千帆。那山脚下干的树枝虬劲疏落，在蓝天夏日的背景下仿佛国画，偏爱空白，也颇留意趣。有时有一群飞鸟循声觅食，在夕阳里，徒留几声凄清的脆鸣，袅袅于空谷山间。</p><hr>        <h2 id="2019-8-18">          <a href="#2019-8-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#2019-8-18" class="headerlink" title="2019.8.18"></a>2019.8.18</h2>      <p>行驶在独库公路上才能感到真正的孤独，裸露的岩壁，空无一人的公路，满是落石的路基。在这里，每一块岩石都在诉说这不同的故事。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0633.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0633.JPG">      </a> 雪山半掩琵琶半遮面似得躲在云层后面，不由得增加了几分神秘感。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0648.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0648.JPG">      </a> 在这条一天可以体验四季的路上，每一个峰回路转都有别样的一番景致，正如移步换景一般，上一帧还是深不见底大峡谷，下一帧就变成了沟壑纵横的雪山。从针叶林到高山草甸再到雪线……甚是迷人。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0644.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0644.JPG">      </a> 翻越雪山，一扫之前裸露的岩石滩，取而代之的是那郁郁葱葱的高山草甸，那是天公的神来之笔，满眼的苍翠从眼前开始延伸，直至渺远的他方，我想它可能是上苍对人世浮沉的些微怜悯。而那悠然的牛羊带着那偶尔露怯的眼神，惊慌地穿过公路，晃悠悠朝着远处走去，印着薄日的光，留下几个淡淡背影……极目远眺，那是修建独库公路的人在这片荒凉的土地挥着汗洒下泪，而我此时正踏在祖国的这方土地之上，闻着这方泥土淳朴的芬芳，我想那当是工人们灵魂的芬芳。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0695.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0695.JPG">      </a></p><hr>        <h2 id="2019-8-19">          <a href="#2019-8-19" class="heading-link"><i class="fas fa-link"></i></a><a href="#2019-8-19" class="headerlink" title="2019.8.19"></a>2019.8.19</h2>      <p>再次飞驰在独库公路上，太阳渐渐地从云层后露了出来，晨曦撒在远处巍峨的雪山上，犹如戴上了金顶。远山层峦叠起，草地色泽丰富，湖泊清如明镜，牛羊马儿悠闲自得。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0755.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0755.JPG">      </a> 平直的公路，向前飞驰的轿车，耳边呼呼的风声，再一次把我们带入雪山，驶向南疆，太阳又羞答答地躲在了云层之后。延绵的山路像绸带一般缠绕在延绵的雪上。 海拔一点点上升，车外气温一点点下降，我们距离雪线的距离也越来越近。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0816.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0816.JPG">      </a> 越过雪线，翻过那重峦叠嶂，气势滂沱的天山山脉，又是延绵不断的下坡路，但是景致与北疆截然不同：这些“远看成岭侧成峰，远近高低各不同”的红色岩壁，静静的屹立在广袤的戈壁滩上，那是一种岑峦迭起的壮丽，是一种傲风凌雪的气度，更是一种气定山河的坦荡。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0846.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0846.JPG">      </a> 库车大峡谷集雄、静、险、幽、神为一体，无不赞美叫绝。两侧红色峡谷陡峭险峻，谷内蜿蜒曲折、幽静深邃。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0868.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0868.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0864.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0864.JPG">      </a> 再折回，天气如同孩子似得，豆大的雨点从天上打下来。再向前，翻回之前的雪山。随着海拔的再次上升，豆大的雨点变成了鹅毛一般的大雪。穿出隧道，雪花如同幕布一样飘落。在这里我终于体验到了千里冰封万里雪飘的北国风光。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0921.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0921.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0954.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0954.JPG">      </a></p><hr>        <h2 id="2019-8-20">          <a href="#2019-8-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#2019-8-20" class="headerlink" title="2019.8.20"></a>2019.8.20</h2>      <p>那拉提在准噶尔蒙古语中意为“最先见到太阳的地方” 挺拔的胡杨，环绕的山峦，哈萨克牧民的毡房，成群的牛羊，无不被它的美丽所震撼。 向前远眺，一望无际的草原，牛羊成群，骏马飞腾，哈萨克牧民那纯白的毡房点缀其间；路边各色的野花，风吹过沙沙作响，及腰的野草…… “天苍苍，野茫茫，风吹草低见牛羊”好像就是为那拉提所写。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0998.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_0998.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1057.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1057.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1060.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1060.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1063.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1063.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1197.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1197.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1208.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1208.JPG">      </a> <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1217.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1217.JPG">      </a></p><hr>        <h2 id="2019-8-21">          <a href="#2019-8-21" class="heading-link"><i class="fas fa-link"></i></a><a href="#2019-8-21" class="headerlink" title="2019.8.21"></a>2019.8.21</h2>      <p>雪白的云朵装着天空那无边的喜悦，如同棉花糖一般轻飘飘地浮游飘动着，恍若触手可及，在明净的天边演绎着斑斓的人生，千姿百态。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1282.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1282.JPG">      </a> 八卦城，相对称的结构，如同八卦一般放射状圆形的布局，街道如神奇迷宫般，街街相通，路路相连，极具有神秘色彩。相传乌孙王建城时，以太极坛为中心，八匹马朝着八个方向规划，形成一个八卦形态。 <a href="https://image.krunk.cn/images/2020/08/30/20b5f65246814ef9a457cb0caefd5b3f.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://image.krunk.cn/images/2020/08/30/20b5f65246814ef9a457cb0caefd5b3f.jpg">      </a></p><hr><div id="player"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player = new DogePlayer({    container: document.getElementById('player'),    userId: 1131,    vcode: 'ce5721b904a63fa5'});</script>![](https://history.whrblog.online/2019/04/07/image-bed-1/07-89.JPG)](https://history.whrblog.online/2019/04/07/image-bed-1/07-89.JPG) ![](https://image-cdn.krunk.cn/images/2019/10/16/IMG_1394-Panorama_zip2.jpg)]![](https://history.whrblog.online/2019/04/07/image-bed-1/33-29.JPG)<hr>        <h2 id="2019-8-22">          <a href="#2019-8-22" class="heading-link"><i class="fas fa-link"></i></a><a href="#2019-8-22" class="headerlink" title="2019.8.22"></a>2019.8.22</h2>      <p>夏塔清丽开阔的雪山下，留有着小溪飞扬的身姿，潺潺的流水声在讲述着乌孙古道当年的辉煌。        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1451.JPG">      在峡谷中穿行，云卷云舒，光影似武，天山山脉木扎特峰在蓝天下呈现，雪山一面，不枉此行。雪山仿佛近在咫尺，又远在天边。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1465.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1465.JPG">      </a> <a href="https://history.whrblog.online/2019/04/07/image-bed-1/18-93.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/18-93.JPG">      </a> 抬头，漆黑的幕布上，偶尔璀璨的星辰在倾诉北疆之夜的寂寥。它闪屏一般地规律眨眼，像极了梵高笔下一帧又一帧变化流淌的罗纳河上的星夜，偌大的夜晚只有漫天的星辰懂得它的黑。而今，这样一望无际的夜空里，我猜测大概是藏着上帝对漫漫人世羞赧的怜悯与深沉的爱，让它在深刻的色调里走向永恒，正印证了那句话：每个人的心里都有一团火，路过的人只看到烟。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1583.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1583.JPG">      </a></p><hr>        <h2 id="2019-8-23">          <a href="#2019-8-23" class="heading-link"><i class="fas fa-link"></i></a><a href="#2019-8-23" class="headerlink" title="2019.8.23"></a>2019.8.23</h2>      <p>八月末的赛里木湖送走了酷暑难耐的夏天，迎来了凉风习习的秋天。寒风起草地黄，应了这句话，这正是一个青黄不接的的季节，白天的日照依旧如往常强烈，而下车时身上携带的热量，经不住湖畔的大风之来势，三两下的吹拂便随之消弭殆尽，只剩下了丝丝凉意不住地往袖口里钻。八月末的赛里木湖周边的景致也略显单薄。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1721.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1721.JPG">      </a></p><p><a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1813.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1813.JPG" alt="大风扬积雪击面">      </a> 高原地区，气候出乎意料的多变，正如“东边日出西边雨”，穿越云雨区，阳光依旧。 <a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1825.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1825.JPG">      </a> 夕阳慢慢移到了山的后方，光影随时间一分一秒地更迭，暗蓝的天空和旖旎的晚霞流光溢彩，这是夕阳跌落于地平线前给予世人最后的馈赠。</p><p><a href="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1918.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://p.whrblog.online/2019/07/04/IMAGE-BED-1/IMG_1918.JPG">      </a>2019.8.23</p><hr>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;2019-8-17&quot;&gt;
          &lt;a href=&quot;#2019-8-17&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#2019-8-17&quot; class=&quot;headerlink&quot; title=&quot;2019.8.17&quot;&gt;&lt;/a&gt;2019.8.17&lt;/h2&gt;
      &lt;p&gt;飞机承载着我对遥远北疆的热忱，在滑行道上缓缓升腾，在气流的颠簸里，我知道我此时已在离北疆越来越近的路途上了，那是个令人心驰神往的名词——北疆。&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="Date" scheme="https://whrblog.online/tags/Date/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="行者笔记" scheme="https://whrblog.online/tags/%E8%A1%8C%E8%80%85%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>树莓派+SSD1306屏幕</title>
    <link href="https://whrblog.online/2019/08/07/%E6%A0%91%E8%8E%93%E6%B4%BEssd1306%E5%B1%8F%E5%B9%95/"/>
    <id>https://whrblog.online/2019/08/07/%E6%A0%91%E8%8E%93%E6%B4%BEssd1306%E5%B1%8F%E5%B9%95/</id>
    <published>2019-08-07T00:37:02.000Z</published>
    <updated>2021-08-21T02:42:53.713Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190804_165053.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190804_165053.jpg">      </a></p><span id="more"></span>        <h1 id="启用树莓派的I2C功能">          <a href="#启用树莓派的I2C功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#启用树莓派的I2C功能" class="headerlink" title="启用树莓派的I2C功能"></a>启用树莓派的I2C功能</h1>      <p>sudo apt-get install -y python-smbus<br>sudo apt-get install -y i2c-tools<br>sudo raspi-config</p><p>Interfacing Options–&gt;I2C–&gt;enable</p><hr>        <h1 id="安装库文件">          <a href="#安装库文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装库文件" class="headerlink" title="安装库文件"></a>安装库文件</h1>      <p>sudo python -m pip install –upgrade pip setuptools wheel</p><p>PIL 库</p><p>sudo apt-get install python-pil python3-pil</p><p>Adafruit-SSD1306 库</p><p>git clone <span class="exturl"><a class="exturl__link" href="https://github.com/adafruit/Adafruit/_Python/_SSD1306.git">https://github.com/adafruit/Adafruit\_Python\_SSD1306.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><hr>        <h1 id="连接屏幕">          <a href="#连接屏幕" class="heading-link"><i class="fas fa-link"></i></a><a href="#连接屏幕" class="headerlink" title="连接屏幕"></a>连接屏幕</h1>      <p><a href="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1565147846250&amp;di=7ee10e48ad53b034f6f3effa0257bba9&amp;imgtype=0&amp;src=http://upload.semidata.info/new.eefocus.com/article/image/2019/01/11/5c380a5770ccf.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1565147846250&amp;di=7ee10e48ad53b034f6f3effa0257bba9&amp;imgtype=0&amp;src=http://upload.semidata.info/new.eefocus.com/article/image/2019/01/11/5c380a5770ccf.jpg" style="width: b9999_10000px;">      </a> 屏幕 GND 接树莓派 GND 屏幕 VCC 接树莓派 3V3 屏幕 SDA 接树莓派 SDA 屏幕 SCL 接树莓派 SCL</p><hr>        <h1 id="检测是否识别到-I2C-设备">          <a href="#检测是否识别到-I2C-设备" class="heading-link"><i class="fas fa-link"></i></a><a href="#检测是否识别到-I2C-设备" class="headerlink" title="检测是否识别到 I2C 设备"></a>检测是否识别到 I2C 设备</h1>      <p>sudo i2cdetect -y 1</p>        <h1 id="运行">          <a href="#运行" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行" class="headerlink" title="运行"></a>运行</h1>      <p>在之前克隆的代码中包含了可以直接运行的示例源码</p><p>sudo nano ~/Adafruit_Python_SSD1306/examples/stats.py</p><p>修改屏幕类型</p><p># 128x32 display with hardware I2C:</p>        <h1 id="disp-Adafruit-SSD1306-SSD1306-128-32-rst-RST">          <a href="#disp-Adafruit-SSD1306-SSD1306-128-32-rst-RST" class="heading-link"><i class="fas fa-link"></i></a><a href="#disp-Adafruit-SSD1306-SSD1306-128-32-rst-RST" class="headerlink" title="disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)"></a>disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)</h1>              <h1 id="128x64-display-with-hardware-I2C">          <a href="#128x64-display-with-hardware-I2C" class="heading-link"><i class="fas fa-link"></i></a><a href="#128x64-display-with-hardware-I2C" class="headerlink" title="128x64 display with hardware I2C:"></a>128x64 display with hardware I2C:</h1>      <p>disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST)</p>        <h1 id="Note-you-can-change-the-I2C-address-by-passing-an-i2c-address-parameter-like">          <a href="#Note-you-can-change-the-I2C-address-by-passing-an-i2c-address-parameter-like" class="heading-link"><i class="fas fa-link"></i></a><a href="#Note-you-can-change-the-I2C-address-by-passing-an-i2c-address-parameter-like" class="headerlink" title="Note you can change the I2C address by passing an i2c_address parameter like:"></a>Note you can change the I2C address by passing an i2c_address parameter like:</h1>              <h1 id="disp-Adafruit-SSD1306-SSD1306-128-64-rst-RST-i2c-address-0x3C">          <a href="#disp-Adafruit-SSD1306-SSD1306-128-64-rst-RST-i2c-address-0x3C" class="heading-link"><i class="fas fa-link"></i></a><a href="#disp-Adafruit-SSD1306-SSD1306-128-64-rst-RST-i2c-address-0x3C" class="headerlink" title="disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, i2c_address=0x3C)"></a>disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, i2c_address=0x3C)</h1>      <p>运行</p><p>sudo python  ~/Adafruit_Python_SSD1306/examples/stats.py</p><p><a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190804_161202.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190804_161202.jpg">      </a></p><p>sudo python ~/Adafruit_Python_SSD1306/examples/image.py</p><p><a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190804_161458.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190804_161458.jpg">      </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190804_165053.jpg&quot;&gt;
        &lt;img class=&quot;lazyload lazyload-gif&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190804_165053.jpg&quot;&gt;
      &lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="IT" scheme="https://whrblog.online/tags/IT/"/>
    
    <category term="Linux" scheme="https://whrblog.online/tags/Linux/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Raspi/Orapi" scheme="https://whrblog.online/tags/Raspi-Orapi/"/>
    
  </entry>
  
  <entry>
    <title>树莓派lot=Node.js+Bylnk+DHT11/DHT22</title>
    <link href="https://whrblog.online/2019/07/30/%E6%A0%91%E8%8E%93%E6%B4%BEnode-jsbylnk-appdht11-dht22-am2302/"/>
    <id>https://whrblog.online/2019/07/30/%E6%A0%91%E8%8E%93%E6%B4%BEnode-jsbylnk-appdht11-dht22-am2302/</id>
    <published>2019-07-29T23:33:30.000Z</published>
    <updated>2021-08-21T02:42:53.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190731_160014.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190731_160014.jpg">      </a></h1><span id="more"></span>        <h1 id="安装npm及Bylnk库">          <a href="#安装npm及Bylnk库" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装npm及Bylnk库" class="headerlink" title="安装npm及Bylnk库"></a>安装npm及Bylnk库</h1>      <p>&nbsp;</p><p>sudo apt install npm -y<br>sudo apt-get install build-essential<br>sudo npm install -g npm<br>sudo npm install -g onoff<br>sudo npm install -g blynk-library</p>        <h1 id="安装传感器库">          <a href="#安装传感器库" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装传感器库" class="headerlink" title="安装传感器库"></a>安装传感器库</h1>      <ul><li>  <span class="exturl"><a class="exturl__link" href="http://www.airspayce.com/mikem/bcm2835/">bcm2835库</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>  <span class="exturl"><a class="exturl__link" href="https://github.com/momenso/node-dht-sensor">node-dht-sensor</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>&nbsp;npm包</li></ul><p>wget <span class="exturl"><a class="exturl__link" href="http://www.airspayce.com/mikem/bcm2835/bcm2835-1.46.tar.gz">http://www.airspayce.com/mikem/bcm2835/bcm2835-1.46.tar.gz</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>tar zxvf bcm2835-1.46.tar.gz<br>cd bcm2835-1.46<br>./configure<br>make<br>sudo make check<br>sudo make install<br>sudo npm install -g node-dht-sensor</p>        <h1 id="连接传感器">          <a href="#连接传感器" class="heading-link"><i class="fas fa-link"></i></a><a href="#连接传感器" class="headerlink" title="连接传感器"></a>连接传感器</h1>      <ul><li>  GND至GND</li><li>  DAT信号到GPIO7</li><li>  VCC至3.3v</li></ul>        <h1 id="创建可执行文件">          <a href="#创建可执行文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建可执行文件" class="headerlink" title="创建可执行文件"></a>创建可执行文件</h1>      <p>cd ~<br>git clone <span class="exturl"><a class="exturl__link" href="https://github.com/wanghurui/Blynk-dht11-22.git">https://github.com/wanghurui/Blynk-dht11-22.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>或者</p><p>var blynkLib = require(‘blynk-library’);<br>var sensorLib = require(‘node-dht-sensor’);</p><p>var AUTH = ‘YOUR_AUTH_TOKEN’;</p><p>// Setup Blynk<br>var blynk = new blynkLib.Blynk(AUTH);</p><p>// Setup sensor, exit if failed<br>var sensorType = 11; // 11 for DHT11, 22 for DHT22 and AM2302<br>var sensorPin  = 4;  // The GPIO pin number for sensor signal<br>if (!sensorLib.initialize(sensorType, sensorPin)) {<br>    console.warn(‘Failed to initialize sensor’);<br>    process.exit(1);<br>}</p><p>// Automatically update sensor value every 2 seconds<br>setInterval(function() {<br>    var readout = sensorLib.read();<br>    blynk.virtualWrite(3, readout.temperature.toFixed(1));<br>    blynk.virtualWrite(4, readout.humidity.toFixed(1));</p><pre><code>console.log('Temperature:', readout.temperature.toFixed(1) + 'C');console.log('Humidity:   ', readout.humidity.toFixed(1)    + '%');</code></pre><p>}, 2000);</p><p>将<strong>YOUR_AUTH_TOKEN</strong>替换为App中的令牌。</p><p>sudo NODE_PATH =/usr/local/lib/node_modules node ./blynk-sensor-test.js</p><p>输出应如下所示</p><p>OnOff mode<br>Connecting to TCP: cloud.blynk.cc 8442<br>Connected<br>Temperature: 18.0C<br>Humidity:    26.0%<br>Temperature: 18.0C<br>Humidity:    26.0%</p><p>可以使用pm2将此程序放在后台守护进程并且开机自启动</p><p>npm install -g pm2<br>sudo NODE_PATH=/usr/local/lib/node_modules pm2 start ./blynk-sensor-test.js<br>sudo pm2 save<br>sudo pm2 startup</p><p>&nbsp; <a href="https://history.whrblog.online/2019/04/07/image-bed-1/20190730071339.png">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/20190730071339.png">      </a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190731_160014.jpg&quot;&gt;
        &lt;img class=&quot;lazyload lazyload-gif&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://history.whrblog.online/2019/04/07/image-bed-1/IMG_20190731_160014.jpg&quot;&gt;
      &lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="IT" scheme="https://whrblog.online/tags/IT/"/>
    
    <category term="Linux" scheme="https://whrblog.online/tags/Linux/"/>
    
    <category term="折腾" scheme="https://whrblog.online/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Raspi/Orapi" scheme="https://whrblog.online/tags/Raspi-Orapi/"/>
    
  </entry>
  
  <entry>
    <title>2019.7.19</title>
    <link href="https://whrblog.online/2019/07/20/2019-7-19/"/>
    <id>https://whrblog.online/2019/07/20/2019-7-19/</id>
    <published>2019-07-20T05:12:55.000Z</published>
    <updated>2021-08-21T02:42:53.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何谓友情？何谓缘分？">          <a href="#何谓友情？何谓缘分？" class="heading-link"><i class="fas fa-link"></i></a><a href="#何谓友情？何谓缘分？" class="headerlink" title="何谓友情？何谓缘分？"></a>何谓友情？何谓缘分？</h2>      <hr><span id="more"></span><p>是离别时远隔重洋却心照不宣的默契，是多年来老旧相片里昔日光景的纪念，是与你聊的同一话题时一起旁若无人的开怀大笑，是茫茫人海行色匆匆里曾经彼此熟悉的身影…… 青春的颜色，是真情的颜色；相聚总是太少，真情总被无情错过。 希望多年以后，你仍然能在别人面前自豪的说出：“我是你的朋友”。</p><hr><p><a href="https://history.whrblog.online/2019/04/07/image-bed-1/20190720150444.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/20190720150444.jpg">      </a> <a href="https://history.whrblog.online/2019/04/07/image-bed-1/20190720150244.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/20190720150244.jpg">      </a> <a href="https://history.whrblog.online/2019/04/07/image-bed-1/20190720150439.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/20190720150439.jpg">      </a> <a href="https://history.whrblog.online/2019/04/07/image-bed-1/20190720150314.jpg">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/20190720150314.jpg">      </a></p><hr><p>2019.7.20</p><p>Whr</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;何谓友情？何谓缘分？&quot;&gt;
          &lt;a href=&quot;#何谓友情？何谓缘分？&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#何谓友情？何谓缘分？&quot; class=&quot;headerlink&quot; title=&quot;何谓友情？何谓缘分？&quot;&gt;&lt;/a&gt;何谓友情？何谓缘分？&lt;/h2&gt;
      &lt;hr&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="Date" scheme="https://whrblog.online/tags/Date/"/>
    
    <category term="Friends" scheme="https://whrblog.online/tags/Friends/"/>
    
    <category term="R.C" scheme="https://whrblog.online/tags/R-C/"/>
    
  </entry>
  
  <entry>
    <title>打卡---M50创意园区</title>
    <link href="https://whrblog.online/2019/07/14/%E6%89%93%E5%8D%A1-m50%E5%88%9B%E6%84%8F%E5%9B%AD%E5%8C%BA/"/>
    <id>https://whrblog.online/2019/07/14/%E6%89%93%E5%8D%A1-m50%E5%88%9B%E6%84%8F%E5%9B%AD%E5%8C%BA/</id>
    <published>2019-07-14T12:23:52.000Z</published>
    <updated>2021-08-21T02:42:53.681Z</updated>
    
    <content type="html"><![CDATA[<p>M50创意园原身为上海春明粗纺，在2005年时，摇身一变成为如今的“M50创意园”。它紧挨着火车站，坐落在上海市普陀区莫干山路。这里之所以命名为M50，我想是因为它有着上世纪30年代到90年代的厂房50多栋吧。</p><span id="more"></span><hr><p><a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0053.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0053.JPG">      </a> <a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0054.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0054.JPG">      </a> &nbsp; <a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_00037.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_00037.JPG">      </a> 莫干山路涂鸦墙，M50处在苏州河的背街处，静谧又有些冷清的莫干山路尽头，涂鸦的外墙，使得这座由老厂与这涂鸦墙有些突兀。这里，城市的颜色性格与涂鸦的活泼个性形成了强烈的对比。</p><hr><p>[caption id=”” align=”aligncenter” width=”585”]<a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0035.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0035.JPG" alt="标志树">      </a> 标志树[/caption] 苍翠的松柏间层层叠叠折射着稀碎的阳光，在光线的折叠中，那棵蓬勃而茁壮的钢筋铁骨的标志树在地上在地上掩映出奇形怪状的影子。</p><hr><p>&nbsp; <a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0065.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0065.JPG">      </a> 强烈的冷暖对比，使人不由自主的在这里安静下来。我坐在一旁的长凳上，开始回忆在上一学年发生在我身边的一点一滴：从八月底的摸底考到一月份的一模，从寒假到二模考再到决定人生道路的中考…………不禁感慨人生天地之间，若白驹之过隙，忽然而已。 &nbsp; <a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0056.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0056.JPG">      </a> 印象派蓝色调的涂鸦充斥着泼墨的油料桶，斜映的夕阳照耀在油画表层，艺术弥散的空气中仿佛每一个空气分子都浸润着中世纪独有的色彩。仿佛是在以他们自己的方式宣泄着对这个现实社会的不满，表达激进的情绪，诉说着自己的要求。 <a href="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0046.JPG">        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://history.whrblog.online/2019/04/07/image-bed-1/IMG_0046.JPG">      </a></p><hr><p>2019.7.15</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;M50创意园原身为上海春明粗纺，在2005年时，摇身一变成为如今的“M50创意园”。它紧挨着火车站，坐落在上海市普陀区莫干山路。这里之所以命名为M50，我想是因为它有着上世纪30年代到90年代的厂房50多栋吧。&lt;/p&gt;</summary>
    
    
    
    <category term="uncategorized" scheme="https://whrblog.online/categories/uncategorized/"/>
    
    
    <category term="Date" scheme="https://whrblog.online/tags/Date/"/>
    
    <category term="摄影" scheme="https://whrblog.online/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="行者笔记" scheme="https://whrblog.online/tags/%E8%A1%8C%E8%80%85%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
